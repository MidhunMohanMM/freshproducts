(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('is-number'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-infinite-scroller', ['exports', '@angular/core', 'rxjs', 'is-number', 'rxjs/operators'], factory) :
    (factory((global['ngx-infinite-scroller'] = {}),global.ng.core,global.rxjs,global.isNumber,global.rxjs.operators));
}(this, (function (exports,core,rxjs,isNumber,operators) { 'use strict';

    isNumber = isNumber && isNumber.hasOwnProperty('default') ? isNumber['default'] : isNumber;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DirectiveStateService = /** @class */ (function () {
        function DirectiveStateService() {
        }
        Object.defineProperty(DirectiveStateService.prototype, "scrollTop", {
            get: /**
             * @return {?}
             */ function () {
                return this._el.nativeElement.scrollTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "scrollHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this._el.nativeElement.scrollHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "clientHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this._el.nativeElement.clientHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "initMode", {
            get: /**
             * @return {?}
             */ function () {
                return this._initMode;
            },
            set: /**
             * @param {?} initMode
             * @return {?}
             */ function (initMode) {
                this._initMode = initMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "scrollStreamActive", {
            get: /**
             * @return {?}
             */ function () {
                return this._scrollStreamActive;
            },
            set: /**
             * @param {?} active
             * @return {?}
             */ function (active) {
                this._scrollStreamActive = active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollPositionpUpdated", {
            get: /**
             * @return {?}
             */ function () {
                return this._previousScrollPositionpUpdated;
            },
            set: /**
             * @param {?} previousScrollPositionpUpdated
             * @return {?}
             */ function (previousScrollPositionpUpdated) {
                this._previousScrollPositionpUpdated = previousScrollPositionpUpdated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollTop", {
            get: /**
             * @return {?}
             */ function () {
                return this._previousScrollTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DirectiveStateService.prototype, "previousScrollHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this._previousScrollHeight;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} params
         * @return {?}
         */
        DirectiveStateService.prototype.setup = /**
         * @param {?} params
         * @return {?}
         */
            function (params) {
                this._el = params.el;
                this._initMode = params.initMode;
                this._scrollStreamActive = params.scrollStreamActive;
                this._previousScrollPositionpUpdated = params.previousScrollPositionpUpdated;
                this.updatePreviousScrollTop();
                this.updatePreviousScrollHeight();
            };
        /**
         * @return {?}
         */
        DirectiveStateService.prototype.updatePreviousScrollTop = /**
         * @return {?}
         */
            function () {
                this._previousScrollTop = this._el.nativeElement.scrollTop;
            };
        /**
         * @return {?}
         */
        DirectiveStateService.prototype.updatePreviousScrollHeight = /**
         * @return {?}
         */
            function () {
                this._previousScrollHeight = this._el.nativeElement.scrollHeight;
            };
        return DirectiveStateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var InitialScrollPosition = {
        DEFAULT: 'DEFAULT',
        TOP: 'TOP',
        MIDDLE: 'MIDDLE',
        BOTTOM: 'BOTTOM',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ DirectiveContext = /** @class */ (function () {
        function DirectiveContext() {
        }
        return DirectiveContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ StrategyBase = /** @class */ (function () {
        function StrategyBase(directive, state) {
            this.directive = directive;
            this.state = state;
        }
        /**
         * @protected
         * @param {?} prevPos
         * @param {?} currentPos
         * @return {?}
         */
        StrategyBase.prototype.wasScrolledDown = /**
         * @protected
         * @param {?} prevPos
         * @param {?} currentPos
         * @return {?}
         */
            function (prevPos, currentPos) {
                return prevPos.scrollTop < currentPos.scrollTop;
            };
        /**
         * @protected
         * @param {?} prevPos
         * @param {?} currentPos
         * @return {?}
         */
        StrategyBase.prototype.wasScrolledUp = /**
         * @protected
         * @param {?} prevPos
         * @param {?} currentPos
         * @return {?}
         */
            function (prevPos, currentPos) {
                return !this.wasScrolledDown(prevPos, currentPos);
            };
        /**
         * @protected
         * @param {?} pos
         * @param {?} scrollPositionTrigger
         * @return {?}
         */
        StrategyBase.prototype.isScrollDownEnough = /**
         * @protected
         * @param {?} pos
         * @param {?} scrollPositionTrigger
         * @return {?}
         */
            function (pos, scrollPositionTrigger) {
                return ((pos.scrollTop + pos.clientHeight) / pos.scrollHeight) > (scrollPositionTrigger / 100);
            };
        /**
         * @protected
         * @param {?} pos
         * @param {?} scrollPositionTrigger
         * @return {?}
         */
        StrategyBase.prototype.isScrollUpEnough = /**
         * @protected
         * @param {?} pos
         * @param {?} scrollPositionTrigger
         * @return {?}
         */
            function (pos, scrollPositionTrigger) {
                return (pos.scrollTop / pos.scrollHeight) < (scrollPositionTrigger / 100);
            };
        /**
         * @protected
         * @param {?} defaultScrollPosition
         * @return {?}
         */
        StrategyBase.prototype.getInitialScrollPositionValue = /**
         * @protected
         * @param {?} defaultScrollPosition
         * @return {?}
         */
            function (defaultScrollPosition) {
                var initialScrollPosition = this.directive.initialScrollPosition;
                if (isNumber(initialScrollPosition)) {
                    return Number(initialScrollPosition);
                }
                /** @type {?} */
                var initialScrollPositions = this.getInitialScrollPositions();
                if (initialScrollPosition === InitialScrollPosition.DEFAULT) {
                    return initialScrollPositions[defaultScrollPosition];
                }
                return initialScrollPositions[initialScrollPosition];
            };
        /**
         * @private
         * @return {?}
         */
        StrategyBase.prototype.getInitialScrollPositions = /**
         * @private
         * @return {?}
         */
            function () {
                var _a;
                var _b = this.state, scrollHeight = _b.scrollHeight, clientHeight = _b.clientHeight;
                return _a = {},
                    _a[InitialScrollPosition.TOP] = 0,
                    _a[InitialScrollPosition.MIDDLE] = scrollHeight / 2 - clientHeight / 2,
                    _a[InitialScrollPosition.BOTTOM] = scrollHeight,
                    _a;
            };
        return StrategyBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollingToTop = /** @class */ (function (_super) {
        __extends(ScrollingToTop, _super);
        function ScrollingToTop(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
        ScrollingToTop.prototype.scrollDirectionChanged = /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
            function (scrollPairChanged) {
                var _this = this;
                return scrollPairChanged.pipe(operators.filter(function (scrollPositions) {
                    return _super.prototype.wasScrolledUp.call(_this, scrollPositions[0], scrollPositions[1]);
                }));
            };
        /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
        ScrollingToTop.prototype.scrollRequestZoneChanged = /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
            function (scrollDirectionChanged) {
                var _this = this;
                return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                    return _super.prototype.isScrollUpEnough.call(_this, scrollPositions[1], _this.directive.scrollUpPercentilePositionTrigger);
                }));
            };
        /**
         * @return {?}
         */
        ScrollingToTop.prototype.askForUpdate = /**
         * @return {?}
         */
            function () {
                this.directive.onScrollUp.next();
            };
        /**
         * @return {?}
         */
        ScrollingToTop.prototype.setInitialScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.BOTTOM);
                this.directive.scrollTo(initialScrollPositionValue);
            };
        /**
         * @return {?}
         */
        ScrollingToTop.prototype.setPreviousScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var prevScrollPosition = this.state.previousScrollTop +
                    (this.state.scrollHeight - this.state.previousScrollHeight);
                this.directive.scrollTo(prevScrollPosition);
            };
        return ScrollingToTop;
    }(StrategyBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollingToBottom = /** @class */ (function (_super) {
        __extends(ScrollingToBottom, _super);
        function ScrollingToBottom(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
        ScrollingToBottom.prototype.scrollDirectionChanged = /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
            function (scrollPairChanged) {
                var _this = this;
                return scrollPairChanged.pipe(operators.filter(function (scrollPositions) {
                    return _super.prototype.wasScrolledDown.call(_this, scrollPositions[0], scrollPositions[1]);
                }));
            };
        /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
        ScrollingToBottom.prototype.scrollRequestZoneChanged = /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
            function (scrollDirectionChanged) {
                var _this = this;
                return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                    return _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger);
                }));
            };
        /**
         * @return {?}
         */
        ScrollingToBottom.prototype.askForUpdate = /**
         * @return {?}
         */
            function () {
                this.directive.onScrollDown.next();
            };
        /**
         * @return {?}
         */
        ScrollingToBottom.prototype.setInitialScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.TOP);
                this.directive.scrollTo(initialScrollPositionValue);
            };
        /**
         * @return {?}
         */
        ScrollingToBottom.prototype.setPreviousScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var prevScrollPosition = this.state.previousScrollTop;
                this.directive.scrollTo(prevScrollPosition);
            };
        return ScrollingToBottom;
    }(StrategyBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollingToBoth = /** @class */ (function (_super) {
        __extends(ScrollingToBoth, _super);
        function ScrollingToBoth(directive, state) {
            return _super.call(this, directive, state) || this;
        }
        /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
        ScrollingToBoth.prototype.scrollDirectionChanged = /**
         * @param {?} scrollPairChanged
         * @return {?}
         */
            function (scrollPairChanged) {
                return scrollPairChanged;
            };
        /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
        ScrollingToBoth.prototype.scrollRequestZoneChanged = /**
         * @param {?} scrollDirectionChanged
         * @return {?}
         */
            function (scrollDirectionChanged) {
                var _this = this;
                return scrollDirectionChanged.pipe(operators.filter(function (scrollPositions) {
                    return (_super.prototype.isScrollUpEnough.call(_this, scrollPositions[1], _this.directive.scrollUpPercentilePositionTrigger) || _super.prototype.isScrollDownEnough.call(_this, scrollPositions[1], _this.directive.scrollDownPercentilePositionTrigger));
                }), operators.tap(function (scrollPositions) {
                    _this.scrolledUp = _super.prototype.wasScrolledUp.call(_this, scrollPositions[0], scrollPositions[1]);
                }));
            };
        /**
         * @return {?}
         */
        ScrollingToBoth.prototype.askForUpdate = /**
         * @return {?}
         */
            function () {
                if (this.scrolledUp) {
                    this.directive.onScrollUp.next();
                }
                else {
                    this.directive.onScrollDown.next();
                }
            };
        /**
         * @return {?}
         */
        ScrollingToBoth.prototype.setInitialScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var initialScrollPositionValue = _super.prototype.getInitialScrollPositionValue.call(this, InitialScrollPosition.MIDDLE);
                this.directive.scrollTo(initialScrollPositionValue);
            };
        /**
         * @return {?}
         */
        ScrollingToBoth.prototype.setPreviousScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var prevScrollPosition;
                if (this.scrolledUp) {
                    prevScrollPosition = this.state.previousScrollTop +
                        (this.state.scrollHeight - this.state.previousScrollHeight);
                }
                else {
                    prevScrollPosition = this.state.previousScrollTop;
                }
                this.directive.scrollTo(prevScrollPosition);
            };
        return ScrollingToBoth;
    }(StrategyBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollHeightListener = /** @class */ (function () {
        function ScrollHeightListener(directive, state) {
            this.directive = directive;
            this.state = state;
            this.DEFAULT_REQUEST_TIMEOUT = 30000;
        }
        /**
         * @return {?}
         */
        ScrollHeightListener.prototype.start = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.listener = window.requestAnimationFrame(this.listen.bind(this));
                if (!this.httpRequestTimeout) {
                    this.httpRequestTimeout = setTimeout(function () {
                        _this.stopIfRequestTimeout();
                    }, this.DEFAULT_REQUEST_TIMEOUT);
                }
            };
        /**
         * @return {?}
         */
        ScrollHeightListener.prototype.stop = /**
         * @return {?}
         */
            function () {
                window.cancelAnimationFrame(this.listener);
                clearTimeout(this.httpRequestTimeout);
                this.httpRequestTimeout = null;
            };
        /**
         * @private
         * @return {?}
         */
        ScrollHeightListener.prototype.listen = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.state.previousScrollHeight !== this.state.scrollHeight) {
                    this.stop();
                    this.directive.onScrollbarHeightChanged();
                }
                else {
                    this.start();
                }
            };
        /**
         * @private
         * @return {?}
         */
        ScrollHeightListener.prototype.stopIfRequestTimeout = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.state.previousScrollPositionpUpdated) {
                    this.stop();
                }
            };
        return ScrollHeightListener;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxInfiniteScrollerDirective = /** @class */ (function (_super) {
        __extends(NgxInfiniteScrollerDirective, _super);
        function NgxInfiniteScrollerDirective(el, renderer, state) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.renderer = renderer;
            _this.state = state;
            _this.strategy = 'scrollingToBottom';
            _this.initialScrollPosition = InitialScrollPosition.DEFAULT;
            _this.scrollbarAnimationInterval = 100;
            _this.scrollDebounceTimeAfterScrollHeightChanged = 50;
            _this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
            _this.scrollUpPercentilePositionTrigger = 2;
            _this.scrollDownPercentilePositionTrigger = 98;
            _this.onScrollUp = new core.EventEmitter();
            _this.onScrollDown = new core.EventEmitter();
            _this.scrollHeightChanged = new rxjs.Subject();
            _this.domMutationEmitter = new rxjs.Subject();
            _this.state.setup({
                el: el,
                initMode: true,
                scrollStreamActive: true,
                previousScrollPositionpUpdated: false
            });
            return _this;
        }
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollPairChanged", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                var _this = this;
                if (this.scrollChanged) {
                    return this.scrollChanged.pipe(operators.takeWhile(function () { return _this.state.scrollStreamActive; }), operators.map(function (e) {
                        return ( /** @type {?} */({
                            scrollHeight: e.target.scrollHeight,
                            scrollTop: e.target.scrollTop,
                            clientHeight: e.target.clientHeight,
                        }));
                    }), operators.pairwise(), operators.debounceTime(this.scrollbarAnimationInterval));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollDirectionChanged", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollRequestZoneChanged", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                var _this = this;
                return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(operators.tap(function () {
                    _this.state.updatePreviousScrollTop();
                    _this.state.updatePreviousScrollHeight();
                    _this.state.previousScrollPositionpUpdated = false;
                    _this.scrollHeightListener.start();
                }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.useStrategy();
                this.useScrollHeightListener();
                this.registerScrollEventHandler();
                this.registerMutationObserver();
                this.registerInitialScrollPostionHandler();
                this.registerPreviousScrollPositionHandler();
            };
        /**
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.registerScrollSpy();
            };
        /**
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.domMutationObserver.disconnect();
            };
        /**
         * @param {?} position
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.scrollTo = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.state.scrollStreamActive = false;
                this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
                this.state.scrollStreamActive = true;
            };
        /**
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.onScrollbarHeightChanged = /**
         * @return {?}
         */
            function () {
                this.scrollHeightChanged.next();
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.registerScrollEventHandler = /**
         * @private
         * @return {?}
         */
            function () {
                this.scrollChanged = rxjs.fromEvent(this.el.nativeElement, 'scroll');
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.registerMutationObserver = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.domMutationObserver = new MutationObserver(function (mutations) {
                    _this.domMutationEmitter.next(mutations);
                });
                /** @type {?} */
                var config = { attributes: true, childList: true, characterData: true };
                this.domMutationObserver.observe(this.el.nativeElement, config);
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.registerInitialScrollPostionHandler = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.domMutationEmitter.pipe(operators.takeWhile(function () { return _this.state.initMode; }), operators.debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(function () {
                    _this.scrollingStrategy.setInitialScrollPosition();
                    _this.state.initMode = false;
                });
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.registerPreviousScrollPositionHandler = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                rxjs.zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(operators.skipWhile(function () { return _this.state.initMode; }), operators.debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(function () {
                    _this.scrollingStrategy.setPreviousScrollPosition();
                    _this.state.previousScrollPositionpUpdated = true;
                });
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.registerScrollSpy = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.scrollRequestZoneChanged.subscribe(function () {
                    _this.scrollingStrategy.askForUpdate();
                });
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.useStrategy = /**
         * @private
         * @return {?}
         */
            function () {
                switch (this.strategy) {
                    case 'scrollingToBoth':
                        this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                        break;
                    case 'scrollingToTop':
                        this.scrollingStrategy = new ScrollingToTop(this, this.state);
                        break;
                    case 'scrollingToBottom':
                    default:
                        this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                        break;
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxInfiniteScrollerDirective.prototype.useScrollHeightListener = /**
         * @private
         * @return {?}
         */
            function () {
                this.scrollHeightListener = new ScrollHeightListener(this, this.state);
            };
        NgxInfiniteScrollerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxInfiniteScroller]'
                    },] }
        ];
        /** @nocollapse */
        NgxInfiniteScrollerDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: DirectiveStateService }
            ];
        };
        NgxInfiniteScrollerDirective.propDecorators = {
            strategy: [{ type: core.Input }],
            initialScrollPosition: [{ type: core.Input }],
            scrollbarAnimationInterval: [{ type: core.Input }],
            scrollDebounceTimeAfterScrollHeightChanged: [{ type: core.Input }],
            scrollDebounceTimeAfterDOMMutationOnInit: [{ type: core.Input }],
            scrollUpPercentilePositionTrigger: [{ type: core.Input }],
            scrollDownPercentilePositionTrigger: [{ type: core.Input }],
            onScrollUp: [{ type: core.Output }],
            onScrollDown: [{ type: core.Output }]
        };
        return NgxInfiniteScrollerDirective;
    }(DirectiveContext));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxInfiniteScrollerModule = /** @class */ (function () {
        function NgxInfiniteScrollerModule() {
        }
        NgxInfiniteScrollerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NgxInfiniteScrollerDirective
                        ],
                        imports: [],
                        exports: [
                            NgxInfiniteScrollerDirective
                        ],
                        providers: [
                            DirectiveStateService
                        ],
                        bootstrap: []
                    },] }
        ];
        return NgxInfiniteScrollerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxInfiniteScrollerModule = NgxInfiniteScrollerModule;
    exports.ɵb = DirectiveContext;
    exports.ɵc = DirectiveStateService;
    exports.ɵa = NgxInfiniteScrollerDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-infinite-scroller.umd.js.map