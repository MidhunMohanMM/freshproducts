/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2, } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, map, pairwise, takeWhile, skipWhile, debounceTime } from 'rxjs/operators';
import { DirectiveStateService } from './directive-state.service';
import { InitialScrollPosition } from './enum/initial-scroll-position-type.enum';
import { DirectiveContext } from './directive-context';
import { ScrollingToTop } from './scrolling-strategy/scrolling-to-top';
import { ScrollingToBottom } from './scrolling-strategy/scrolling-to-bottom';
import { ScrollingToBoth } from './scrolling-strategy/scrolling-to-both';
import { ScrollHeightListener } from './scroll-height-listener/scroll-height-listener';
var NgxInfiniteScrollerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NgxInfiniteScrollerDirective, _super);
    function NgxInfiniteScrollerDirective(el, renderer, state) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.state = state;
        _this.strategy = 'scrollingToBottom';
        _this.initialScrollPosition = InitialScrollPosition.DEFAULT;
        _this.scrollbarAnimationInterval = 100;
        _this.scrollDebounceTimeAfterScrollHeightChanged = 50;
        _this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
        _this.scrollUpPercentilePositionTrigger = 2;
        _this.scrollDownPercentilePositionTrigger = 98;
        _this.onScrollUp = new EventEmitter();
        _this.onScrollDown = new EventEmitter();
        _this.scrollHeightChanged = new Subject();
        _this.domMutationEmitter = new Subject();
        _this.state.setup({
            el: el,
            initMode: true,
            scrollStreamActive: true,
            previousScrollPositionpUpdated: false
        });
        return _this;
    }
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollPairChanged", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.scrollChanged) {
                return this.scrollChanged.pipe(takeWhile(function () { return _this.state.scrollStreamActive; }), map(function (e) {
                    return (/** @type {?} */ ({
                        scrollHeight: e.target.scrollHeight,
                        scrollTop: e.target.scrollTop,
                        clientHeight: e.target.clientHeight,
                    }));
                }), pairwise(), debounceTime(this.scrollbarAnimationInterval));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollDirectionChanged", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxInfiniteScrollerDirective.prototype, "scrollRequestZoneChanged", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(tap(function () {
                _this.state.updatePreviousScrollTop();
                _this.state.updatePreviousScrollHeight();
                _this.state.previousScrollPositionpUpdated = false;
                _this.scrollHeightListener.start();
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.useStrategy();
        this.useScrollHeightListener();
        this.registerScrollEventHandler();
        this.registerMutationObserver();
        this.registerInitialScrollPostionHandler();
        this.registerPreviousScrollPositionHandler();
    };
    /**
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.registerScrollSpy();
    };
    /**
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.domMutationObserver.disconnect();
    };
    /**
     * @param {?} position
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.scrollTo = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.state.scrollStreamActive = false;
        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
        this.state.scrollStreamActive = true;
    };
    /**
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.onScrollbarHeightChanged = /**
     * @return {?}
     */
    function () {
        this.scrollHeightChanged.next();
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.registerScrollEventHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.scrollChanged = fromEvent(this.el.nativeElement, 'scroll');
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.registerMutationObserver = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.domMutationObserver = new MutationObserver(function (mutations) {
            _this.domMutationEmitter.next(mutations);
        });
        /** @type {?} */
        var config = { attributes: true, childList: true, characterData: true };
        this.domMutationObserver.observe(this.el.nativeElement, config);
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.registerInitialScrollPostionHandler = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.domMutationEmitter.pipe(takeWhile(function () { return _this.state.initMode; }), debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(function () {
            _this.scrollingStrategy.setInitialScrollPosition();
            _this.state.initMode = false;
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.registerPreviousScrollPositionHandler = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(skipWhile(function () { return _this.state.initMode; }), debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(function () {
            _this.scrollingStrategy.setPreviousScrollPosition();
            _this.state.previousScrollPositionpUpdated = true;
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.registerScrollSpy = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.scrollRequestZoneChanged.subscribe(function () {
            _this.scrollingStrategy.askForUpdate();
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.useStrategy = /**
     * @private
     * @return {?}
     */
    function () {
        switch (this.strategy) {
            case 'scrollingToBoth':
                this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                break;
            case 'scrollingToTop':
                this.scrollingStrategy = new ScrollingToTop(this, this.state);
                break;
            case 'scrollingToBottom':
            default:
                this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                break;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxInfiniteScrollerDirective.prototype.useScrollHeightListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.scrollHeightListener = new ScrollHeightListener(this, this.state);
    };
    NgxInfiniteScrollerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxInfiniteScroller]'
                },] }
    ];
    /** @nocollapse */
    NgxInfiniteScrollerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: DirectiveStateService }
    ]; };
    NgxInfiniteScrollerDirective.propDecorators = {
        strategy: [{ type: Input }],
        initialScrollPosition: [{ type: Input }],
        scrollbarAnimationInterval: [{ type: Input }],
        scrollDebounceTimeAfterScrollHeightChanged: [{ type: Input }],
        scrollDebounceTimeAfterDOMMutationOnInit: [{ type: Input }],
        scrollUpPercentilePositionTrigger: [{ type: Input }],
        scrollDownPercentilePositionTrigger: [{ type: Input }],
        onScrollUp: [{ type: Output }],
        onScrollDown: [{ type: Output }]
    };
    return NgxInfiniteScrollerDirective;
}(DirectiveContext));
export { NgxInfiniteScrollerDirective };
if (false) {
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.strategy;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.initialScrollPosition;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollbarAnimationInterval;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDebounceTimeAfterScrollHeightChanged;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDebounceTimeAfterDOMMutationOnInit;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollUpPercentilePositionTrigger;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDownPercentilePositionTrigger;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.onScrollUp;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.onScrollDown;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollHeightListener;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollHeightChanged;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.domMutationObserver;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.domMutationEmitter;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollChanged;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,