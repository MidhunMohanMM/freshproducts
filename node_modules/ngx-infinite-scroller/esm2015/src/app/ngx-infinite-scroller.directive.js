/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2, } from '@angular/core';
import { Subject, zip, fromEvent } from 'rxjs';
import { tap, map, pairwise, takeWhile, skipWhile, debounceTime } from 'rxjs/operators';
import { DirectiveStateService } from './directive-state.service';
import { InitialScrollPosition } from './enum/initial-scroll-position-type.enum';
import { DirectiveContext } from './directive-context';
import { ScrollingToTop } from './scrolling-strategy/scrolling-to-top';
import { ScrollingToBottom } from './scrolling-strategy/scrolling-to-bottom';
import { ScrollingToBoth } from './scrolling-strategy/scrolling-to-both';
import { ScrollHeightListener } from './scroll-height-listener/scroll-height-listener';
export class NgxInfiniteScrollerDirective extends DirectiveContext {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} state
     */
    constructor(el, renderer, state) {
        super();
        this.el = el;
        this.renderer = renderer;
        this.state = state;
        this.strategy = 'scrollingToBottom';
        this.initialScrollPosition = InitialScrollPosition.DEFAULT;
        this.scrollbarAnimationInterval = 100;
        this.scrollDebounceTimeAfterScrollHeightChanged = 50;
        this.scrollDebounceTimeAfterDOMMutationOnInit = 1000;
        this.scrollUpPercentilePositionTrigger = 2;
        this.scrollDownPercentilePositionTrigger = 98;
        this.onScrollUp = new EventEmitter();
        this.onScrollDown = new EventEmitter();
        this.scrollHeightChanged = new Subject();
        this.domMutationEmitter = new Subject();
        this.state.setup({
            el: el,
            initMode: true,
            scrollStreamActive: true,
            previousScrollPositionpUpdated: false
        });
    }
    /**
     * @private
     * @return {?}
     */
    get scrollPairChanged() {
        if (this.scrollChanged) {
            return this.scrollChanged.pipe(takeWhile(() => this.state.scrollStreamActive), map((e) => {
                return (/** @type {?} */ ({
                    scrollHeight: e.target.scrollHeight,
                    scrollTop: e.target.scrollTop,
                    clientHeight: e.target.clientHeight,
                }));
            }), pairwise(), debounceTime(this.scrollbarAnimationInterval));
        }
    }
    /**
     * @private
     * @return {?}
     */
    get scrollDirectionChanged() {
        return this.scrollingStrategy.scrollDirectionChanged(this.scrollPairChanged);
    }
    /**
     * @private
     * @return {?}
     */
    get scrollRequestZoneChanged() {
        return this.scrollingStrategy.scrollRequestZoneChanged(this.scrollDirectionChanged).pipe(tap(() => {
            this.state.updatePreviousScrollTop();
            this.state.updatePreviousScrollHeight();
            this.state.previousScrollPositionpUpdated = false;
            this.scrollHeightListener.start();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.useStrategy();
        this.useScrollHeightListener();
        this.registerScrollEventHandler();
        this.registerMutationObserver();
        this.registerInitialScrollPostionHandler();
        this.registerPreviousScrollPositionHandler();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.registerScrollSpy();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.domMutationObserver.disconnect();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    scrollTo(position) {
        this.state.scrollStreamActive = false;
        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', position);
        this.state.scrollStreamActive = true;
    }
    /**
     * @return {?}
     */
    onScrollbarHeightChanged() {
        this.scrollHeightChanged.next();
    }
    /**
     * @private
     * @return {?}
     */
    registerScrollEventHandler() {
        this.scrollChanged = fromEvent(this.el.nativeElement, 'scroll');
    }
    /**
     * @private
     * @return {?}
     */
    registerMutationObserver() {
        this.domMutationObserver = new MutationObserver((mutations) => {
            this.domMutationEmitter.next(mutations);
        });
        /** @type {?} */
        const config = { attributes: true, childList: true, characterData: true };
        this.domMutationObserver.observe(this.el.nativeElement, config);
    }
    /**
     * @private
     * @return {?}
     */
    registerInitialScrollPostionHandler() {
        this.domMutationEmitter.pipe(takeWhile(() => this.state.initMode), debounceTime(this.scrollDebounceTimeAfterDOMMutationOnInit)).subscribe(() => {
            this.scrollingStrategy.setInitialScrollPosition();
            this.state.initMode = false;
        });
    }
    /**
     * @private
     * @return {?}
     */
    registerPreviousScrollPositionHandler() {
        zip(this.scrollRequestZoneChanged, this.scrollHeightChanged).pipe(skipWhile(() => this.state.initMode), debounceTime(this.scrollDebounceTimeAfterScrollHeightChanged)).subscribe(() => {
            this.scrollingStrategy.setPreviousScrollPosition();
            this.state.previousScrollPositionpUpdated = true;
        });
    }
    /**
     * @private
     * @return {?}
     */
    registerScrollSpy() {
        this.scrollRequestZoneChanged.subscribe(() => {
            this.scrollingStrategy.askForUpdate();
        });
    }
    /**
     * @private
     * @return {?}
     */
    useStrategy() {
        switch (this.strategy) {
            case 'scrollingToBoth':
                this.scrollingStrategy = new ScrollingToBoth(this, this.state);
                break;
            case 'scrollingToTop':
                this.scrollingStrategy = new ScrollingToTop(this, this.state);
                break;
            case 'scrollingToBottom':
            default:
                this.scrollingStrategy = new ScrollingToBottom(this, this.state);
                break;
        }
    }
    /**
     * @private
     * @return {?}
     */
    useScrollHeightListener() {
        this.scrollHeightListener = new ScrollHeightListener(this, this.state);
    }
}
NgxInfiniteScrollerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxInfiniteScroller]'
            },] }
];
/** @nocollapse */
NgxInfiniteScrollerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DirectiveStateService }
];
NgxInfiniteScrollerDirective.propDecorators = {
    strategy: [{ type: Input }],
    initialScrollPosition: [{ type: Input }],
    scrollbarAnimationInterval: [{ type: Input }],
    scrollDebounceTimeAfterScrollHeightChanged: [{ type: Input }],
    scrollDebounceTimeAfterDOMMutationOnInit: [{ type: Input }],
    scrollUpPercentilePositionTrigger: [{ type: Input }],
    scrollDownPercentilePositionTrigger: [{ type: Input }],
    onScrollUp: [{ type: Output }],
    onScrollDown: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.strategy;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.initialScrollPosition;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollbarAnimationInterval;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDebounceTimeAfterScrollHeightChanged;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDebounceTimeAfterDOMMutationOnInit;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollUpPercentilePositionTrigger;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.scrollDownPercentilePositionTrigger;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.onScrollUp;
    /** @type {?} */
    NgxInfiniteScrollerDirective.prototype.onScrollDown;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollHeightListener;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollHeightChanged;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.domMutationObserver;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.domMutationEmitter;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.scrollChanged;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxInfiniteScrollerDirective.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,