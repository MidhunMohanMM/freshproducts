/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class DirectiveStateService {
    /**
     * @return {?}
     */
    get scrollTop() {
        return this._el.nativeElement.scrollTop;
    }
    /**
     * @return {?}
     */
    get scrollHeight() {
        return this._el.nativeElement.scrollHeight;
    }
    /**
     * @return {?}
     */
    get clientHeight() {
        return this._el.nativeElement.clientHeight;
    }
    /**
     * @return {?}
     */
    get initMode() {
        return this._initMode;
    }
    /**
     * @param {?} initMode
     * @return {?}
     */
    set initMode(initMode) {
        this._initMode = initMode;
    }
    /**
     * @return {?}
     */
    get scrollStreamActive() {
        return this._scrollStreamActive;
    }
    /**
     * @param {?} active
     * @return {?}
     */
    set scrollStreamActive(active) {
        this._scrollStreamActive = active;
    }
    /**
     * @return {?}
     */
    get previousScrollPositionpUpdated() {
        return this._previousScrollPositionpUpdated;
    }
    /**
     * @param {?} previousScrollPositionpUpdated
     * @return {?}
     */
    set previousScrollPositionpUpdated(previousScrollPositionpUpdated) {
        this._previousScrollPositionpUpdated = previousScrollPositionpUpdated;
    }
    /**
     * @return {?}
     */
    get previousScrollTop() {
        return this._previousScrollTop;
    }
    /**
     * @return {?}
     */
    get previousScrollHeight() {
        return this._previousScrollHeight;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    setup(params) {
        this._el = params.el;
        this._initMode = params.initMode;
        this._scrollStreamActive = params.scrollStreamActive;
        this._previousScrollPositionpUpdated = params.previousScrollPositionpUpdated;
        this.updatePreviousScrollTop();
        this.updatePreviousScrollHeight();
    }
    /**
     * @return {?}
     */
    updatePreviousScrollTop() {
        this._previousScrollTop = this._el.nativeElement.scrollTop;
    }
    /**
     * @return {?}
     */
    updatePreviousScrollHeight() {
        this._previousScrollHeight = this._el.nativeElement.scrollHeight;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._el;
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._initMode;
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._scrollStreamActive;
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._previousScrollPositionpUpdated;
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._previousScrollTop;
    /**
     * @type {?}
     * @private
     */
    DirectiveStateService.prototype._previousScrollHeight;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL2RpcmVjdGl2ZS1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxNQUFNLE9BQU8scUJBQXFCOzs7O0lBRWhDLElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDN0MsQ0FBQzs7OztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxJQUFXLFFBQVEsQ0FBQyxRQUFpQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBVyxrQkFBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxJQUFXLGtCQUFrQixDQUFDLE1BQWU7UUFDM0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLE1BQU0sQ0FBQztJQUNwQyxDQUFDOzs7O0lBRUQsSUFBVyw4QkFBOEI7UUFDdkMsT0FBTyxJQUFJLENBQUMsK0JBQStCLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFRCxJQUFXLDhCQUE4QixDQUFDLDhCQUF1QztRQUMvRSxJQUFJLENBQUMsK0JBQStCLEdBQUcsOEJBQThCLENBQUM7SUFDeEUsQ0FBQzs7OztJQUVELElBQVcsaUJBQWlCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCxJQUFXLG9CQUFvQjtRQUM3QixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxDQUFDOzs7OztJQWNNLEtBQUssQ0FBQyxNQUtaO1FBQ0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1FBQ3JELElBQUksQ0FBQywrQkFBK0IsR0FBRyxNQUFNLENBQUMsOEJBQThCLENBQUM7UUFDN0UsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVNLHVCQUF1QjtRQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQzdELENBQUM7Ozs7SUFFTSwwQkFBMEI7UUFDL0IsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuRSxDQUFDO0NBQ0Y7Ozs7OztJQWpDQyxvQ0FBd0I7Ozs7O0lBRXhCLDBDQUEyQjs7Ozs7SUFFM0Isb0RBQXFDOzs7OztJQUVyQyxnRUFBaUQ7Ozs7O0lBRWpELG1EQUFtQzs7Ozs7SUFFbkMsc0RBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgRGlyZWN0aXZlU3RhdGVTZXJ2aWNlIHtcblxuICBwdWJsaWMgZ2V0IHNjcm9sbFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc2Nyb2xsSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgcHVibGljIGdldCBjbGllbnRIZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGluaXRNb2RlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbml0TW9kZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW5pdE1vZGUoaW5pdE1vZGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pbml0TW9kZSA9IGluaXRNb2RlO1xuICB9XG5cbiAgcHVibGljIGdldCBzY3JvbGxTdHJlYW1BY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbFN0cmVhbUFjdGl2ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc2Nyb2xsU3RyZWFtQWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Njcm9sbFN0cmVhbUFjdGl2ZSA9IGFjdGl2ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcHJldmlvdXNTY3JvbGxQb3NpdGlvbnBVcGRhdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9wcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IHByZXZpb3VzU2Nyb2xsUG9zaXRpb25wVXBkYXRlZChwcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9wcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQgPSBwcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByZXZpb3VzU2Nyb2xsVG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzU2Nyb2xsVG9wO1xuICB9XG5cbiAgcHVibGljIGdldCBwcmV2aW91c1Njcm9sbEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9wcmV2aW91c1Njcm9sbEhlaWdodDtcbiAgfVxuXG4gIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmO1xuXG4gIHByaXZhdGUgX2luaXRNb2RlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgX3Njcm9sbFN0cmVhbUFjdGl2ZTogYm9vbGVhbjtcblxuICBwcml2YXRlIF9wcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBfcHJldmlvdXNTY3JvbGxUb3A6IG51bWJlcjtcblxuICBwcml2YXRlIF9wcmV2aW91c1Njcm9sbEhlaWdodDogbnVtYmVyO1xuXG4gIHB1YmxpYyBzZXR1cChwYXJhbXM6IHtcbiAgICBlbDogRWxlbWVudFJlZixcbiAgICBpbml0TW9kZTogYm9vbGVhbixcbiAgICBzY3JvbGxTdHJlYW1BY3RpdmU6IGJvb2xlYW4sXG4gICAgcHJldmlvdXNTY3JvbGxQb3NpdGlvbnBVcGRhdGVkOiBib29sZWFuXG4gIH0pOiB2b2lkIHtcbiAgICB0aGlzLl9lbCA9IHBhcmFtcy5lbDtcbiAgICB0aGlzLl9pbml0TW9kZSA9IHBhcmFtcy5pbml0TW9kZTtcbiAgICB0aGlzLl9zY3JvbGxTdHJlYW1BY3RpdmUgPSBwYXJhbXMuc2Nyb2xsU3RyZWFtQWN0aXZlO1xuICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsUG9zaXRpb25wVXBkYXRlZCA9IHBhcmFtcy5wcmV2aW91c1Njcm9sbFBvc2l0aW9ucFVwZGF0ZWQ7XG4gICAgdGhpcy51cGRhdGVQcmV2aW91c1Njcm9sbFRvcCgpO1xuICAgIHRoaXMudXBkYXRlUHJldmlvdXNTY3JvbGxIZWlnaHQoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVQcmV2aW91c1Njcm9sbFRvcCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wcmV2aW91c1Njcm9sbFRvcCA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVByZXZpb3VzU2Nyb2xsSGVpZ2h0KCk6IHZvaWQge1xuICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gIH1cbn1cbiJdfQ==