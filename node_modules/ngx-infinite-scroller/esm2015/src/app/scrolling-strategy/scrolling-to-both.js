/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { tap, filter } from 'rxjs/operators';
import { StrategyBase } from './strategy-base';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
export class ScrollingToBoth extends StrategyBase {
    /**
     * @param {?} directive
     * @param {?} state
     */
    constructor(directive, state) {
        super(directive, state);
    }
    /**
     * @param {?} scrollPairChanged
     * @return {?}
     */
    scrollDirectionChanged(scrollPairChanged) {
        return scrollPairChanged;
    }
    /**
     * @param {?} scrollDirectionChanged
     * @return {?}
     */
    scrollRequestZoneChanged(scrollDirectionChanged) {
        return scrollDirectionChanged.pipe(filter((scrollPositions) => {
            return (super.isScrollUpEnough(scrollPositions[1], this.directive.scrollUpPercentilePositionTrigger) || super.isScrollDownEnough(scrollPositions[1], this.directive.scrollDownPercentilePositionTrigger));
        }), tap((scrollPositions) => {
            this.scrolledUp = super.wasScrolledUp(scrollPositions[0], scrollPositions[1]);
        }));
    }
    /**
     * @return {?}
     */
    askForUpdate() {
        if (this.scrolledUp) {
            this.directive.onScrollUp.next();
        }
        else {
            this.directive.onScrollDown.next();
        }
    }
    /**
     * @return {?}
     */
    setInitialScrollPosition() {
        /** @type {?} */
        const initialScrollPositionValue = super.getInitialScrollPositionValue(InitialScrollPosition.MIDDLE);
        this.directive.scrollTo(initialScrollPositionValue);
    }
    /**
     * @return {?}
     */
    setPreviousScrollPosition() {
        /** @type {?} */
        let prevScrollPosition;
        if (this.scrolledUp) {
            prevScrollPosition = this.state.previousScrollTop +
                (this.state.scrollHeight - this.state.previousScrollHeight);
        }
        else {
            prevScrollPosition = this.state.previousScrollTop;
        }
        this.directive.scrollTo(prevScrollPosition);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollingToBoth.prototype.scrolledUp;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsaW5nLXRvLWJvdGguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL3Njcm9sbGluZy1zdHJhdGVneS9zY3JvbGxpbmctdG8tYm90aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbEYsTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTs7Ozs7SUFJL0MsWUFDRSxTQUF1QyxFQUN2QyxLQUE0QjtRQUU1QixLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRU0sc0JBQXNCLENBQUMsaUJBQStDO1FBRTNFLE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFTSx3QkFBd0IsQ0FBQyxzQkFBb0Q7UUFFbEYsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQ2hDLE1BQU0sQ0FBQyxDQUFDLGVBQWlDLEVBQUUsRUFBRTtZQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUM1QixlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQ2pELElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUMzQixlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsbUNBQW1DLENBQ25ELENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxDQUFDLGVBQWlDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQ25DLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDbEIsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7SUFFTSxZQUFZO1FBQ2pCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEM7SUFDSCxDQUFDOzs7O0lBRU0sd0JBQXdCOztjQUN2QiwwQkFBMEIsR0FBRyxLQUFLLENBQUMsNkJBQTZCLENBQ3BFLHFCQUFxQixDQUFDLE1BQU0sQ0FDN0I7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFTSx5QkFBeUI7O1lBQzFCLGtCQUFrQjtRQUV0QixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUI7Z0JBQy9DLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQy9EO2FBQU07WUFDTCxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7Ozs7OztJQTlEQyxxQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgU3RyYXRlZ3lCYXNlIH0gZnJvbSAnLi9zdHJhdGVneS1iYXNlJztcblxuaW1wb3J0IHsgTmd4SW5maW5pdGVTY3JvbGxlckRpcmVjdGl2ZSB9IGZyb20gJy4uL25neC1pbmZpbml0ZS1zY3JvbGxlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGlyZWN0aXZlU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vZGlyZWN0aXZlLXN0YXRlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTY3JvbGxpbmdTdHJhdGVneSB9IGZyb20gJy4uL21vZGVsL3Njcm9sbGluZy1zdHJhdGVneS5tb2RlbCc7XG5pbXBvcnQgeyBTY3JvbGxQb3NpdGlvbiB9IGZyb20gJy4uL21vZGVsL3Njcm9sbC1wb3NpdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBJbml0aWFsU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi9lbnVtL2luaXRpYWwtc2Nyb2xsLXBvc2l0aW9uLXR5cGUuZW51bSc7XG5cbmV4cG9ydCBjbGFzcyBTY3JvbGxpbmdUb0JvdGggZXh0ZW5kcyBTdHJhdGVneUJhc2UgaW1wbGVtZW50cyBTY3JvbGxpbmdTdHJhdGVneSB7XG5cbiAgcHJpdmF0ZSBzY3JvbGxlZFVwOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRpcmVjdGl2ZTogTmd4SW5maW5pdGVTY3JvbGxlckRpcmVjdGl2ZSxcbiAgICBzdGF0ZTogRGlyZWN0aXZlU3RhdGVTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGRpcmVjdGl2ZSwgc3RhdGUpO1xuICB9XG5cbiAgcHVibGljIHNjcm9sbERpcmVjdGlvbkNoYW5nZWQoc2Nyb2xsUGFpckNoYW5nZWQ6IE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4pOlxuICAgIE9ic2VydmFibGU8U2Nyb2xsUG9zaXRpb25bXT4ge1xuICAgIHJldHVybiBzY3JvbGxQYWlyQ2hhbmdlZDtcbiAgfVxuXG4gIHB1YmxpYyBzY3JvbGxSZXF1ZXN0Wm9uZUNoYW5nZWQoc2Nyb2xsRGlyZWN0aW9uQ2hhbmdlZDogT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPik6XG4gICAgT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPiB7XG4gICAgcmV0dXJuIHNjcm9sbERpcmVjdGlvbkNoYW5nZWQucGlwZShcbiAgICAgIGZpbHRlcigoc2Nyb2xsUG9zaXRpb25zOiBTY3JvbGxQb3NpdGlvbltdKSA9PiB7XG4gICAgICAgIHJldHVybiAoc3VwZXIuaXNTY3JvbGxVcEVub3VnaChcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbnNbMV0sXG4gICAgICAgICAgdGhpcy5kaXJlY3RpdmUuc2Nyb2xsVXBQZXJjZW50aWxlUG9zaXRpb25UcmlnZ2VyXG4gICAgICAgICkgfHwgc3VwZXIuaXNTY3JvbGxEb3duRW5vdWdoKFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uc1sxXSxcbiAgICAgICAgICB0aGlzLmRpcmVjdGl2ZS5zY3JvbGxEb3duUGVyY2VudGlsZVBvc2l0aW9uVHJpZ2dlclxuICAgICAgICApKTtcbiAgICAgIH0pLFxuICAgICAgdGFwKChzY3JvbGxQb3NpdGlvbnM6IFNjcm9sbFBvc2l0aW9uW10pID0+IHtcbiAgICAgICAgdGhpcy5zY3JvbGxlZFVwID0gc3VwZXIud2FzU2Nyb2xsZWRVcChcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbnNbMF0sXG4gICAgICAgICAgc2Nyb2xsUG9zaXRpb25zWzFdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc2tGb3JVcGRhdGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsZWRVcCkge1xuICAgICAgdGhpcy5kaXJlY3RpdmUub25TY3JvbGxVcC5uZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlyZWN0aXZlLm9uU2Nyb2xsRG93bi5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldEluaXRpYWxTY3JvbGxQb3NpdGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCBpbml0aWFsU2Nyb2xsUG9zaXRpb25WYWx1ZSA9IHN1cGVyLmdldEluaXRpYWxTY3JvbGxQb3NpdGlvblZhbHVlKFxuICAgICAgSW5pdGlhbFNjcm9sbFBvc2l0aW9uLk1JRERMRSxcbiAgICApO1xuXG4gICAgdGhpcy5kaXJlY3RpdmUuc2Nyb2xsVG8oaW5pdGlhbFNjcm9sbFBvc2l0aW9uVmFsdWUpO1xuICB9XG5cbiAgcHVibGljIHNldFByZXZpb3VzU2Nyb2xsUG9zaXRpb24oKTogdm9pZCB7XG4gICAgbGV0IHByZXZTY3JvbGxQb3NpdGlvbjtcblxuICAgIGlmICh0aGlzLnNjcm9sbGVkVXApIHtcbiAgICAgIHByZXZTY3JvbGxQb3NpdGlvbiA9IHRoaXMuc3RhdGUucHJldmlvdXNTY3JvbGxUb3AgK1xuICAgICAgICAodGhpcy5zdGF0ZS5zY3JvbGxIZWlnaHQgLSB0aGlzLnN0YXRlLnByZXZpb3VzU2Nyb2xsSGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJldlNjcm9sbFBvc2l0aW9uID0gdGhpcy5zdGF0ZS5wcmV2aW91c1Njcm9sbFRvcDtcbiAgICB9XG5cbiAgICB0aGlzLmRpcmVjdGl2ZS5zY3JvbGxUbyhwcmV2U2Nyb2xsUG9zaXRpb24pO1xuICB9XG59XG4iXX0=