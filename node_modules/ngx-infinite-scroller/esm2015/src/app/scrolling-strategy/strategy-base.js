/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import isNumber from 'is-number';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
/**
 * @abstract
 */
export class StrategyBase {
    /**
     * @param {?} directive
     * @param {?} state
     */
    constructor(directive, state) {
        this.directive = directive;
        this.state = state;
    }
    /**
     * @protected
     * @param {?} prevPos
     * @param {?} currentPos
     * @return {?}
     */
    wasScrolledDown(prevPos, currentPos) {
        return prevPos.scrollTop < currentPos.scrollTop;
    }
    /**
     * @protected
     * @param {?} prevPos
     * @param {?} currentPos
     * @return {?}
     */
    wasScrolledUp(prevPos, currentPos) {
        return !this.wasScrolledDown(prevPos, currentPos);
    }
    /**
     * @protected
     * @param {?} pos
     * @param {?} scrollPositionTrigger
     * @return {?}
     */
    isScrollDownEnough(pos, scrollPositionTrigger) {
        return ((pos.scrollTop + pos.clientHeight) / pos.scrollHeight) > (scrollPositionTrigger / 100);
    }
    /**
     * @protected
     * @param {?} pos
     * @param {?} scrollPositionTrigger
     * @return {?}
     */
    isScrollUpEnough(pos, scrollPositionTrigger) {
        return (pos.scrollTop / pos.scrollHeight) < (scrollPositionTrigger / 100);
    }
    /**
     * @protected
     * @param {?} defaultScrollPosition
     * @return {?}
     */
    getInitialScrollPositionValue(defaultScrollPosition) {
        const { initialScrollPosition } = this.directive;
        if (isNumber(initialScrollPosition)) {
            return Number(initialScrollPosition);
        }
        /** @type {?} */
        const initialScrollPositions = this.getInitialScrollPositions();
        if (initialScrollPosition === InitialScrollPosition.DEFAULT) {
            return initialScrollPositions[defaultScrollPosition];
        }
        return initialScrollPositions[initialScrollPosition];
    }
    /**
     * @private
     * @return {?}
     */
    getInitialScrollPositions() {
        const { scrollHeight, clientHeight } = this.state;
        return {
            [InitialScrollPosition.TOP]: 0,
            [InitialScrollPosition.MIDDLE]: scrollHeight / 2 - clientHeight / 2,
            [InitialScrollPosition.BOTTOM]: scrollHeight,
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    StrategyBase.prototype.directive;
    /**
     * @type {?}
     * @protected
     */
    StrategyBase.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3ktYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmZpbml0ZS1zY3JvbGxlci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2Nyb2xsaW5nLXN0cmF0ZWd5L3N0cmF0ZWd5LWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sUUFBUSxNQUFNLFdBQVcsQ0FBQztBQU1qQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7OztBQUVsRixNQUFNLE9BQWdCLFlBQVk7Ozs7O0lBQ2hDLFlBQ1ksU0FBdUMsRUFDdkMsS0FBNEI7UUFENUIsY0FBUyxHQUFULFNBQVMsQ0FBOEI7UUFDdkMsVUFBSyxHQUFMLEtBQUssQ0FBdUI7SUFDcEMsQ0FBQzs7Ozs7OztJQUVLLGVBQWUsQ0FBQyxPQUF1QixFQUFFLFVBQTBCO1FBQzNFLE9BQU8sT0FBTyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO0lBQ2xELENBQUM7Ozs7Ozs7SUFFUyxhQUFhLENBQUMsT0FBdUIsRUFBRSxVQUEwQjtRQUN6RSxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7OztJQUVTLGtCQUFrQixDQUFDLEdBQW1CLEVBQUUscUJBQTZCO1FBQzdFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Ozs7Ozs7SUFFUyxnQkFBZ0IsQ0FBQyxHQUFtQixFQUFFLHFCQUE2QjtRQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7Ozs7SUFFUyw2QkFBNkIsQ0FBQyxxQkFBNEM7Y0FDNUUsRUFBRSxxQkFBcUIsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTO1FBRWhELElBQUksUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDbkMsT0FBTyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUN0Qzs7Y0FFSyxzQkFBc0IsR0FBOEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFO1FBRTFGLElBQUkscUJBQXFCLEtBQUsscUJBQXFCLENBQUMsT0FBTyxFQUFFO1lBQzNELE9BQU8sc0JBQXNCLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUN0RDtRQUVELE9BQU8sc0JBQXNCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7OztJQUVPLHlCQUF5QjtjQUN6QixFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSztRQUVqRCxPQUFPO1lBQ0wsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzlCLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsR0FBRyxZQUFZLEdBQUcsQ0FBQztZQUNuRSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUFFLFlBQVk7U0FDN0MsQ0FBQztJQUNKLENBQUM7Q0FDRjs7Ozs7O0lBN0NHLGlDQUFpRDs7Ozs7SUFDakQsNkJBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzTnVtYmVyIGZyb20gJ2lzLW51bWJlcic7XG5cbmltcG9ydCB7IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERpcmVjdGl2ZVN0YXRlU2VydmljZSB9IGZyb20gJy4uL2RpcmVjdGl2ZS1zdGF0ZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi9tb2RlbC9zY3JvbGwtcG9zaXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSW5pdGlhbFNjcm9sbFBvc2l0aW9uIH0gZnJvbSAnLi4vZW51bS9pbml0aWFsLXNjcm9sbC1wb3NpdGlvbi10eXBlLmVudW0nO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RyYXRlZ3lCYXNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGRpcmVjdGl2ZTogTmd4SW5maW5pdGVTY3JvbGxlckRpcmVjdGl2ZSxcbiAgICBwcm90ZWN0ZWQgc3RhdGU6IERpcmVjdGl2ZVN0YXRlU2VydmljZVxuICApIHsgfVxuXG4gIHByb3RlY3RlZCB3YXNTY3JvbGxlZERvd24ocHJldlBvczogU2Nyb2xsUG9zaXRpb24sIGN1cnJlbnRQb3M6IFNjcm9sbFBvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByZXZQb3Muc2Nyb2xsVG9wIDwgY3VycmVudFBvcy5zY3JvbGxUb3A7XG4gIH1cblxuICBwcm90ZWN0ZWQgd2FzU2Nyb2xsZWRVcChwcmV2UG9zOiBTY3JvbGxQb3NpdGlvbiwgY3VycmVudFBvczogU2Nyb2xsUG9zaXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMud2FzU2Nyb2xsZWREb3duKHByZXZQb3MsIGN1cnJlbnRQb3MpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGlzU2Nyb2xsRG93bkVub3VnaChwb3M6IFNjcm9sbFBvc2l0aW9uLCBzY3JvbGxQb3NpdGlvblRyaWdnZXI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoKHBvcy5zY3JvbGxUb3AgKyBwb3MuY2xpZW50SGVpZ2h0KSAvIHBvcy5zY3JvbGxIZWlnaHQpID4gKHNjcm9sbFBvc2l0aW9uVHJpZ2dlciAvIDEwMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNTY3JvbGxVcEVub3VnaChwb3M6IFNjcm9sbFBvc2l0aW9uLCBzY3JvbGxQb3NpdGlvblRyaWdnZXI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAocG9zLnNjcm9sbFRvcCAvIHBvcy5zY3JvbGxIZWlnaHQpIDwgKHNjcm9sbFBvc2l0aW9uVHJpZ2dlciAvIDEwMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SW5pdGlhbFNjcm9sbFBvc2l0aW9uVmFsdWUoZGVmYXVsdFNjcm9sbFBvc2l0aW9uOiBJbml0aWFsU2Nyb2xsUG9zaXRpb24pOiBudW1iZXIge1xuICAgIGNvbnN0IHsgaW5pdGlhbFNjcm9sbFBvc2l0aW9uIH0gPSB0aGlzLmRpcmVjdGl2ZTtcblxuICAgIGlmIChpc051bWJlcihpbml0aWFsU2Nyb2xsUG9zaXRpb24pKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKGluaXRpYWxTY3JvbGxQb3NpdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdGlhbFNjcm9sbFBvc2l0aW9uczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHRoaXMuZ2V0SW5pdGlhbFNjcm9sbFBvc2l0aW9ucygpO1xuXG4gICAgaWYgKGluaXRpYWxTY3JvbGxQb3NpdGlvbiA9PT0gSW5pdGlhbFNjcm9sbFBvc2l0aW9uLkRFRkFVTFQpIHtcbiAgICAgIHJldHVybiBpbml0aWFsU2Nyb2xsUG9zaXRpb25zW2RlZmF1bHRTY3JvbGxQb3NpdGlvbl07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXRpYWxTY3JvbGxQb3NpdGlvbnNbaW5pdGlhbFNjcm9sbFBvc2l0aW9uXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW5pdGlhbFNjcm9sbFBvc2l0aW9ucygpOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcbiAgICBjb25zdCB7IHNjcm9sbEhlaWdodCwgY2xpZW50SGVpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIFtJbml0aWFsU2Nyb2xsUG9zaXRpb24uVE9QXTogMCxcbiAgICAgIFtJbml0aWFsU2Nyb2xsUG9zaXRpb24uTUlERExFXTogc2Nyb2xsSGVpZ2h0IC8gMiAtIGNsaWVudEhlaWdodCAvIDIsXG4gICAgICBbSW5pdGlhbFNjcm9sbFBvc2l0aW9uLkJPVFRPTV06IHNjcm9sbEhlaWdodCxcbiAgICB9O1xuICB9XG59XG4iXX0=