/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { filter } from 'rxjs/operators';
import { StrategyBase } from './strategy-base';
import { InitialScrollPosition } from '../enum/initial-scroll-position-type.enum';
export class ScrollingToBottom extends StrategyBase {
    /**
     * @param {?} directive
     * @param {?} state
     */
    constructor(directive, state) {
        super(directive, state);
    }
    /**
     * @param {?} scrollPairChanged
     * @return {?}
     */
    scrollDirectionChanged(scrollPairChanged) {
        return scrollPairChanged.pipe(filter((scrollPositions) => {
            return super.wasScrolledDown(scrollPositions[0], scrollPositions[1]);
        }));
    }
    /**
     * @param {?} scrollDirectionChanged
     * @return {?}
     */
    scrollRequestZoneChanged(scrollDirectionChanged) {
        return scrollDirectionChanged.pipe(filter((scrollPositions) => {
            return super.isScrollDownEnough(scrollPositions[1], this.directive.scrollDownPercentilePositionTrigger);
        }));
    }
    /**
     * @return {?}
     */
    askForUpdate() {
        this.directive.onScrollDown.next();
    }
    /**
     * @return {?}
     */
    setInitialScrollPosition() {
        /** @type {?} */
        const initialScrollPositionValue = super.getInitialScrollPositionValue(InitialScrollPosition.TOP);
        this.directive.scrollTo(initialScrollPositionValue);
    }
    /**
     * @return {?}
     */
    setPreviousScrollPosition() {
        /** @type {?} */
        const prevScrollPosition = this.state.previousScrollTop;
        this.directive.scrollTo(prevScrollPosition);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsaW5nLXRvLWJvdHRvbS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmZpbml0ZS1zY3JvbGxlci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2Nyb2xsaW5nLXN0cmF0ZWd5L3Njcm9sbGluZy10by1ib3R0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbEYsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFlBQVk7Ozs7O0lBRWpELFlBQ0UsU0FBdUMsRUFDdkMsS0FBNEI7UUFFNUIsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVNLHNCQUFzQixDQUFDLGlCQUErQztRQUUzRSxPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FDM0IsTUFBTSxDQUFDLENBQUMsZUFBaUMsRUFBRSxFQUFFO1lBQzNDLE9BQU8sS0FBSyxDQUFDLGVBQWUsQ0FDMUIsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUNsQixlQUFlLENBQUMsQ0FBQyxDQUFDLENBQ25CLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFTSx3QkFBd0IsQ0FBQyxzQkFBb0Q7UUFFbEYsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQ2hDLE1BQU0sQ0FBQyxDQUFDLGVBQWlDLEVBQUUsRUFBRTtZQUMzQyxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FDN0IsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLG1DQUFtQyxDQUNuRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFTSx3QkFBd0I7O2NBQ3ZCLDBCQUEwQixHQUFHLEtBQUssQ0FBQyw2QkFBNkIsQ0FDcEUscUJBQXFCLENBQUMsR0FBRyxDQUMxQjtRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDdEQsQ0FBQzs7OztJQUVNLHlCQUF5Qjs7Y0FDeEIsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUI7UUFDdkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFN0cmF0ZWd5QmFzZSB9IGZyb20gJy4vc3RyYXRlZ3ktYmFzZSc7XG5cbmltcG9ydCB7IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERpcmVjdGl2ZVN0YXRlU2VydmljZSB9IGZyb20gJy4uL2RpcmVjdGl2ZS1zdGF0ZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2Nyb2xsaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi9tb2RlbC9zY3JvbGxpbmctc3RyYXRlZ3kubW9kZWwnO1xuaW1wb3J0IHsgU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi9tb2RlbC9zY3JvbGwtcG9zaXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSW5pdGlhbFNjcm9sbFBvc2l0aW9uIH0gZnJvbSAnLi4vZW51bS9pbml0aWFsLXNjcm9sbC1wb3NpdGlvbi10eXBlLmVudW0nO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsaW5nVG9Cb3R0b20gZXh0ZW5kcyBTdHJhdGVneUJhc2UgaW1wbGVtZW50cyBTY3JvbGxpbmdTdHJhdGVneSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZGlyZWN0aXZlOiBOZ3hJbmZpbml0ZVNjcm9sbGVyRGlyZWN0aXZlLFxuICAgIHN0YXRlOiBEaXJlY3RpdmVTdGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoZGlyZWN0aXZlLCBzdGF0ZSk7XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsRGlyZWN0aW9uQ2hhbmdlZChzY3JvbGxQYWlyQ2hhbmdlZDogT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPik6XG4gICAgT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPiB7XG4gICAgcmV0dXJuIHNjcm9sbFBhaXJDaGFuZ2VkLnBpcGUoXG4gICAgICBmaWx0ZXIoKHNjcm9sbFBvc2l0aW9uczogU2Nyb2xsUG9zaXRpb25bXSkgPT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIud2FzU2Nyb2xsZWREb3duKFxuICAgICAgICAgIHNjcm9sbFBvc2l0aW9uc1swXSxcbiAgICAgICAgICBzY3JvbGxQb3NpdGlvbnNbMV1cbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzY3JvbGxSZXF1ZXN0Wm9uZUNoYW5nZWQoc2Nyb2xsRGlyZWN0aW9uQ2hhbmdlZDogT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPik6XG4gICAgT2JzZXJ2YWJsZTxTY3JvbGxQb3NpdGlvbltdPiB7XG4gICAgcmV0dXJuIHNjcm9sbERpcmVjdGlvbkNoYW5nZWQucGlwZShcbiAgICAgIGZpbHRlcigoc2Nyb2xsUG9zaXRpb25zOiBTY3JvbGxQb3NpdGlvbltdKSA9PiB7XG4gICAgICAgIHJldHVybiBzdXBlci5pc1Njcm9sbERvd25Fbm91Z2goXG4gICAgICAgICAgc2Nyb2xsUG9zaXRpb25zWzFdLFxuICAgICAgICAgIHRoaXMuZGlyZWN0aXZlLnNjcm9sbERvd25QZXJjZW50aWxlUG9zaXRpb25UcmlnZ2VyXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXNrRm9yVXBkYXRlKCk6IHZvaWQge1xuICAgIHRoaXMuZGlyZWN0aXZlLm9uU2Nyb2xsRG93bi5uZXh0KCk7XG4gIH1cblxuICBwdWJsaWMgc2V0SW5pdGlhbFNjcm9sbFBvc2l0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IGluaXRpYWxTY3JvbGxQb3NpdGlvblZhbHVlID0gc3VwZXIuZ2V0SW5pdGlhbFNjcm9sbFBvc2l0aW9uVmFsdWUoXG4gICAgICBJbml0aWFsU2Nyb2xsUG9zaXRpb24uVE9QLFxuICAgICk7XG5cbiAgICB0aGlzLmRpcmVjdGl2ZS5zY3JvbGxUbyhpbml0aWFsU2Nyb2xsUG9zaXRpb25WYWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgc2V0UHJldmlvdXNTY3JvbGxQb3NpdGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCBwcmV2U2Nyb2xsUG9zaXRpb24gPSB0aGlzLnN0YXRlLnByZXZpb3VzU2Nyb2xsVG9wO1xuICAgIHRoaXMuZGlyZWN0aXZlLnNjcm9sbFRvKHByZXZTY3JvbGxQb3NpdGlvbik7XG4gIH1cbn1cbiJdfQ==