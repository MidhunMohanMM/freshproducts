/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class ScrollHeightListener {
    /**
     * @param {?} directive
     * @param {?} state
     */
    constructor(directive, state) {
        this.directive = directive;
        this.state = state;
        this.DEFAULT_REQUEST_TIMEOUT = 30000;
    }
    /**
     * @return {?}
     */
    start() {
        this.listener = window.requestAnimationFrame(this.listen.bind(this));
        if (!this.httpRequestTimeout) {
            this.httpRequestTimeout = setTimeout(() => {
                this.stopIfRequestTimeout();
            }, this.DEFAULT_REQUEST_TIMEOUT);
        }
    }
    /**
     * @return {?}
     */
    stop() {
        window.cancelAnimationFrame(this.listener);
        clearTimeout(this.httpRequestTimeout);
        this.httpRequestTimeout = null;
    }
    /**
     * @private
     * @return {?}
     */
    listen() {
        if (this.state.previousScrollHeight !== this.state.scrollHeight) {
            this.stop();
            this.directive.onScrollbarHeightChanged();
        }
        else {
            this.start();
        }
    }
    /**
     * @private
     * @return {?}
     */
    stopIfRequestTimeout() {
        if (!this.state.previousScrollPositionpUpdated) {
            this.stop();
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollHeightListener.prototype.DEFAULT_REQUEST_TIMEOUT;
    /**
     * @type {?}
     * @private
     */
    ScrollHeightListener.prototype.listener;
    /**
     * @type {?}
     * @private
     */
    ScrollHeightListener.prototype.httpRequestTimeout;
    /**
     * @type {?}
     * @private
     */
    ScrollHeightListener.prototype.directive;
    /**
     * @type {?}
     * @private
     */
    ScrollHeightListener.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWhlaWdodC1saXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmZpbml0ZS1zY3JvbGxlci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2Nyb2xsLWhlaWdodC1saXN0ZW5lci9zY3JvbGwtaGVpZ2h0LWxpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxNQUFNLE9BQU8sb0JBQW9COzs7OztJQVEvQixZQUNVLFNBQXVDLEVBQ3ZDLEtBQTRCO1FBRDVCLGNBQVMsR0FBVCxTQUFTLENBQThCO1FBQ3ZDLFVBQUssR0FBTCxLQUFLLENBQXVCO1FBUjlCLDRCQUF1QixHQUFHLEtBQUssQ0FBQztJQVNwQyxDQUFDOzs7O0lBRUUsS0FBSztRQUNWLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFckUsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUNsQyxHQUFHLEVBQUU7Z0JBQ0gsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDOUIsQ0FBQyxFQUNELElBQUksQ0FBQyx1QkFBdUIsQ0FDN0IsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7OztJQUVNLElBQUk7UUFDVCxNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLFlBQVksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRU8sTUFBTTtRQUNaLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtZQUMvRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDM0M7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxvQkFBb0I7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUU7WUFDOUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0NBQ0Y7Ozs7OztJQTVDQyx1REFBd0M7Ozs7O0lBRXhDLHdDQUF5Qjs7Ozs7SUFFekIsa0RBQWdDOzs7OztJQUc5Qix5Q0FBK0M7Ozs7O0lBQy9DLHFDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9uZ3gtaW5maW5pdGUtc2Nyb2xsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERpcmVjdGl2ZVN0YXRlU2VydmljZSB9IGZyb20gJy4uL2RpcmVjdGl2ZS1zdGF0ZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFNjcm9sbEhlaWdodExpc3RlbmVyIHtcblxuICBwcml2YXRlIERFRkFVTFRfUkVRVUVTVF9USU1FT1VUID0gMzAwMDA7XG5cbiAgcHJpdmF0ZSBsaXN0ZW5lcjogbnVtYmVyO1xuXG4gIHByaXZhdGUgaHR0cFJlcXVlc3RUaW1lb3V0OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaXJlY3RpdmU6IE5neEluZmluaXRlU2Nyb2xsZXJEaXJlY3RpdmUsXG4gICAgcHJpdmF0ZSBzdGF0ZTogRGlyZWN0aXZlU3RhdGVTZXJ2aWNlXG4gICkgeyB9XG5cbiAgcHVibGljIHN0YXJ0KCk6IHZvaWQge1xuICAgIHRoaXMubGlzdGVuZXIgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubGlzdGVuLmJpbmQodGhpcykpO1xuXG4gICAgaWYgKCF0aGlzLmh0dHBSZXF1ZXN0VGltZW91dCkge1xuICAgICAgdGhpcy5odHRwUmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdG9wSWZSZXF1ZXN0VGltZW91dCgpO1xuICAgICAgICB9LFxuICAgICAgICB0aGlzLkRFRkFVTFRfUkVRVUVTVF9USU1FT1VUXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmxpc3RlbmVyKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5odHRwUmVxdWVzdFRpbWVvdXQpO1xuICAgIHRoaXMuaHR0cFJlcXVlc3RUaW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN0YXRlLnByZXZpb3VzU2Nyb2xsSGVpZ2h0ICE9PSB0aGlzLnN0YXRlLnNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICB0aGlzLmRpcmVjdGl2ZS5vblNjcm9sbGJhckhlaWdodENoYW5nZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RvcElmUmVxdWVzdFRpbWVvdXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnByZXZpb3VzU2Nyb2xsUG9zaXRpb25wVXBkYXRlZCkge1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfVxuICB9XG59XG4iXX0=