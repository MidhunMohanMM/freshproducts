{"version":3,"file":"opitzconsulting-pie-chart.js.map","sources":["ng://@opitzconsulting/pie-chart/lib/pie-chart.service.ts","ng://@opitzconsulting/pie-chart/lib/pie-chart.component.ts","ng://@opitzconsulting/pie-chart/lib/pie-chart.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PieChartService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, Input, OnChanges, DoCheck, ElementRef, SimpleChanges, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\nimport * as d3 from 'd3';\r\n\r\n/** chart item properties */\r\nexport interface PieChartData {\r\n  /** value of item */\r\n  value: number;\r\n  /** caption of item (must be unique) */\r\n  caption: string;\r\n  /** optional color of item (if not set, generated automatically) */\r\n  color?: string;\r\n}\r\n\r\n/** internal chart item properties */\r\nexport interface InternalPieChartData extends PieChartData {\r\n  /** svg path for item */\r\n  path?: string;\r\n  /** delete flag for removing after transition */\r\n  deleted?: boolean;\r\n}\r\n\r\n/** internal type for optimization */\r\nexport type PieArcData = d3.PieArcDatum<InternalPieChartData> & d3.DefaultArcObject;\r\n\r\n@Component({\r\n  selector: 'oc-pie-chart',\r\n  template: `<div class=\"pie-chart-tooltip\"></div>\r\n<svg [attr.width]=\"width\" [attr.height]=\"height\">\r\n    <g [attr.transform]=\"center\">\r\n        <path *ngFor=\"let d of curData; let idx = index;\" [attr.idx]=\"idx\" \r\n            [attr.fill]=\"d.data.color\" [attr.d]=\"d.data.path\" [attr.tooltip]=\"d.data.caption\"\r\n            (mouseover)=\"overPath($event)\" (mousemove)=\"movePath($event);\" (mouseout)=\"outPath($event)\" (click)=\"clickPath($event)\" />\r\n    </g>\r\n</svg>`,\r\n  styles: [`div.pie-chart-tooltip{position:fixed;display:none;opacity:0;font:12px sans-serif;color:#fff;background-color:rgba(35,47,52,.8);padding:5px}path{opacity:.7;stroke:#fff;stroke-width:2px}path:hover{opacity:1;stroke:#e3e3e3}`]\r\n})\r\nexport class PieChartComponent implements OnInit, OnChanges, DoCheck {\r\n  /** chart data, which should be displayed */\r\n  @Input() data: Array<PieChartData> = [];\r\n  /** chart width in pixel */\r\n  @Input() width = 250;\r\n  /** chart height in pixel */\r\n  @Input() height = 250;\r\n  /** duration of animation transition */\r\n  @Input() duration = 1000;\r\n  /** inner spacing in pixel, if greater than 0 it defines the radius of the empty circle in the middle */\r\n  @Input() innerSpacing = 0;\r\n  /** outer spacing in pixel */\r\n  @Input() outerSpacing = 1;\r\n  /** fired when user clicks on a chart entry */\r\n  @Output() chartClick: EventEmitter<PieChartData> = new EventEmitter();\r\n  /** fired when user hovers a chart entry */\r\n  @Output() chartHover: EventEmitter<PieChartData> = new EventEmitter();\r\n\r\n  /** pie chart radius in pixel */\r\n  public radius: number;\r\n  /** transform-attribute to center chart vertical and horizontal */\r\n  public center: string;\r\n  /** current chart data with angle and path definitions, it will be consistent to the representation */\r\n  public curData: PieArcData[] = [];\r\n  /** end chart data with angle and path definitions, it will representate the end state and used only for interpolation */\r\n  private endData: PieArcData[] = [];\r\n  /** path generator function (internal use only) */\r\n  protected pathGenerator: d3.Arc<any, d3.DefaultArcObject>;\r\n  /** copy of last processed data, used to identify changes in ngDoCheck that Angular overlooked */\r\n  private lastData: Array<PieChartData> = [];\r\n\r\n  /**\r\n   * Creates a deep copy of an variable. Do not use this function with recursive objects or\r\n   * browser objects like window or document.\r\n   * ToDo: should be outsourced.\r\n   * @param v \r\n   */\r\n  protected deepCopy<T>(v: T): T {\r\n    return JSON.parse(JSON.stringify(v));\r\n  };\r\n\r\n  /**\r\n   * constructor\r\n   * @param element \r\n   */\r\n  constructor(\r\n    private element: ElementRef\r\n  ) {};\r\n\r\n  ngOnInit() {\r\n    this.tooltip = this.element.nativeElement.querySelector('div.pie-chart-tooltip') as HTMLDivElement;\r\n  }\r\n\r\n  /**\r\n   * Fired when Angular (re-)sets data-bound properties. This function does not fire when changed data in bound objects or arrays.\r\n   * Angular only checks references.\r\n   * @param changes \r\n   */\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // check if entries in bound data property has changed\r\n    this.detectDataChange();\r\n  };\r\n\r\n  /**\r\n   * Fired during every change detection run to detect and act upon changes that Angular can't or won't detect on its own.\r\n   */\r\n  ngDoCheck() {\r\n    // check if entries in bound data property has changed\r\n    this.detectDataChange();\r\n  };\r\n\r\n  /**\r\n   * Checks whether the data property has changed. This function also check whether only an item property has\r\n   * changed. In case of change the chart will be rendered.\r\n   */\r\n  protected detectDataChange() {\r\n    // fast check: if items were added or removed\r\n    let dataChanged = (this.data.length !== this.lastData.length);\r\n    // detail check:\r\n    if(dataChanged === false){\r\n      // loop all items\r\n      for(let idx=0; idx<this.data.length; ++idx){\r\n        const a = this.data[idx];\r\n        const b = this.lastData[idx];\r\n        // check internal item properties\r\n        dataChanged = dataChanged || (a.caption !== b.caption || a.color !== b.color || a.value !== b.value);\r\n        // for optimization, stop if change detected\r\n        if(dataChanged) break;\r\n      }\r\n    }\r\n    // if change detected\r\n    if(dataChanged){\r\n      // render chart\r\n      this.render();\r\n      // copy current data to identify changes\r\n      this.lastData = this.deepCopy(this.data);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Generates a random color for a chart item.\r\n   */\r\n  protected generateRandomColor(value: number): string {\r\n    const hue2rgb = (p: number, q: number, t: number) => {\r\n      if(t < 0) t += 1; \r\n      if(t > 1) t -= 1; \r\n      if(t < 1/6) return p + (q - p) * 6 * t;\r\n      if(t < 1/2) return q;\r\n      if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n      return p;\r\n    };\r\n    // make sure, generated color does not exists yet in data array\r\n    let color;\r\n    let uniqueColorGenerated = false;\r\n    while(uniqueColorGenerated === false){\r\n      const h = (Math.random() + 0.618033988749895) % 1;\r\n      const s = .5;\r\n      const l = .6;\r\n      let q = l + s - l * s;\r\n      let p = 2 * l - q;\r\n      const r = hue2rgb(p, q, h + 1/3);\r\n      const g = hue2rgb(p, q, h);\r\n      const b = hue2rgb(p, q, h - 1/3);\r\n      color = '#' \r\n        + Math.round(r * 255).toString(16)\r\n        + Math.round(g * 255).toString(16)\r\n        + Math.round(b * 255).toString(16);\r\n      uniqueColorGenerated = (this.data.map( (d) => d.color).filter( (d) => d === color).length === 0);\r\n    }\r\n    return color;\r\n  };\r\n\r\n  /**\r\n   * generates a pie chart item definition\r\n   * @param item \r\n   * @param index \r\n   * @param value \r\n   * @param startAngle \r\n   * @param endAngle \r\n   */\r\n  protected generatePieArcData(item: PieChartData, index: number, value: number, startAngle: number, endAngle: number): PieArcData {\r\n    // generate definition\r\n    const result = {\r\n      data: item,\r\n      index: index,\r\n      value: value,\r\n      startAngle: startAngle,\r\n      endAngle: endAngle,\r\n      padAngle: 0,\r\n      innerRadius: this.radius - 40,\r\n      outerRadius: this.radius\r\n    };\r\n    // generate svg path d-attribute from definition\r\n    (result.data as InternalPieChartData).path = this.pathGenerator(result);\r\n    // return definition\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Checks whether items were deleted and initiate delete transition for these items.\r\n   */\r\n  protected detectDeletedEntries() {\r\n    // loop current state entries\r\n    this.curData.forEach( (curItem, idx) => {\r\n      // only check if current entry is not marked as deleted\r\n      if(curItem.data.deleted!==true){\r\n        // check if entry not exists anymore\r\n        const isDeleted = (this.data.filter( (item) => item.caption === curItem.data.caption).length === 0);\r\n        // if entry is deleted\r\n        if(isDeleted){\r\n          // mark entry in current state as deleted\r\n          this.curData[idx].data.deleted = true;\r\n          // mark entry in end state as deleted and set value to 0 for transtion\r\n          this.endData[idx].data.deleted = true;\r\n          this.endData[idx].value = 0;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks whether items were inserted and initiate insert transition for these items.\r\n   */\r\n  protected detectInsertedEntries(): void {\r\n    // loop given data array\r\n    this.data.forEach( (item, idx) => {\r\n      // check if entry is new\r\n      const isInserted = (this.curData.filter( (curItem) => curItem.data.deleted!==true && curItem.data.caption === item.caption).length===0);\r\n      // if entry is new\r\n      if(isInserted){\r\n        // generate current state entry with value of 0 for transition\r\n        {\r\n          const d = this.generatePieArcData(this.deepCopy(item), idx, 0, -1, -1);\r\n          this.curData.splice(idx, 0, d);\r\n        }\r\n        // generate end state entry with given value\r\n        {\r\n          const d = this.generatePieArcData(this.deepCopy(item), idx, item.value, -1, -1);\r\n          this.endData.splice(idx, 0, d);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks whether items were moved and initiate transition for these items.\r\n   */\r\n  protected detectMovedEntries(): void {\r\n    // separate index in current state array\r\n    let curIndex = 0;\r\n    // loop data array\r\n    for(let index=0; index<this.data.length; ++index){\r\n      // find next index in current state array, skip items marked as deleted\r\n      while(this.curData[curIndex].data.deleted) ++curIndex; \r\n      // check if item is moved by comparing captions\r\n      if(this.data[index].caption !== this.curData[curIndex].data.caption){\r\n        // updating state items\r\n        {\r\n          // mark item in current state array as deleted\r\n          this.curData[curIndex].data.deleted = true;\r\n          // mark item in end state array as deleted and set value to 0 for transition\r\n          this.endData[curIndex].data.deleted = true;\r\n          this.endData[curIndex].value = 0;\r\n        }\r\n        // insert entry in current state array with value 0 for transition\r\n        {\r\n          const item = this.deepCopy(this.data[index]);\r\n          const d = this.generatePieArcData(item, -1, 0, -1, -1);\r\n          this.curData.splice(curIndex, 0, d);\r\n        }\r\n        // insert entry in end state array with given value\r\n        {\r\n          const item = this.deepCopy(this.data[index]);\r\n          const d = this.generatePieArcData(item, -1, item.value, -1, -1);\r\n          this.endData.splice(curIndex, 0, d);\r\n        }\r\n        // because of inserting item to the array's, increment index twice\r\n        ++curIndex;\r\n      }\r\n      ++curIndex;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Synchronize state arrays (curData / endData) with given items (data).\r\n   */\r\n  protected syncItems(): void {\r\n    // sync values and colors\r\n    this.data.forEach( (item, index) => {\r\n      // find item index in state array's\r\n      let curIndex = 0;\r\n      for(let i=0; i<this.curData.length; ++i){\r\n        if(!this.curData[i].data.deleted && this.curData[i].data.caption === item.caption){\r\n          curIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      // update value in state entries\r\n      this.curData[curIndex].data.value = item.value;\r\n      this.endData[curIndex].data.value = item.value;\r\n      // update value in end state entry for transition\r\n      this.endData[curIndex].value = item.value;\r\n      // update color in end state entry for transition\r\n      this.endData[curIndex].data.color = item.color;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Function for interrupt a running chart animation. Necessary because if transition is still active\r\n   * when a new transition is started, tween factory function from previos transition will still be fired \r\n   * until end of transition is reached. For entries which have a started transition the tween factory\r\n   * function will be fired multiple times with different tween interpolation range!\r\n   */\r\n  protected interrupt: Function = undefined;\r\n\r\n  /**\r\n   * will be triggerd to animate chart changes.\r\n   * important! this method musst be called within a setTimeout function because of angulars \r\n   * rendering cycle.\r\n   */\r\n  protected animateChanges(): void {\r\n    // get svg element reference\r\n    const svg = (this.element.nativeElement.querySelector('svg') as SVGElement);\r\n    // reference all path elements in svg element\r\n    const paths = d3.select(svg).selectAll('path');\r\n    // define interruption function to stop running animations\r\n    this.interrupt = () => {\r\n      // call paths interrupt method\r\n      paths.interrupt();\r\n      // delete interupt definition\r\n      delete this.interrupt;\r\n    };\r\n    // start path animation\r\n    paths\r\n      .transition()\r\n      .duration(this.duration)\r\n      // Use d3 attrTween transition method with dummy attribute. Make sure the dummy attribute does not\r\n      // exists at path elements!\r\n      .attrTween('pie-tween-dummy', (arg0, idx, nodeList) => {\r\n        // create interpolation functions to calculate step values\r\n        const iValue = d3.interpolate(this.curData[idx].value, this.endData[idx].value);\r\n        const iStartAngle = d3.interpolate(this.curData[idx].startAngle, this.endData[idx].startAngle);\r\n        const iEndAngle = d3.interpolate(this.curData[idx].endAngle, this.endData[idx].endAngle);\r\n        const iColor = d3.interpolate(this.curData[idx].data.color, this.endData[idx].data.color);\r\n        // return factory function for animation steps\r\n        return (t) => {\r\n          // interpolate values by given transition value\r\n          this.curData[idx].value = iValue(t);\r\n          this.curData[idx].startAngle = iStartAngle(t);\r\n          this.curData[idx].endAngle = iEndAngle(t);\r\n          this.curData[idx].data.color = iColor(t);\r\n          // generate new path\r\n          this.curData[idx].data.path = this.pathGenerator(this.curData[idx]);\r\n          // return empty string. This is only necessary for typescript compiler. Nothing should be changed here.\r\n          return '';\r\n        };\r\n      })\r\n      // when transition is complete\r\n      .on('end', (arg0, idx, nodeList) => {\r\n        // when transition is complete for the last item\r\n        if(idx===nodeList.length-1){\r\n          // remove as deleted marked entries\r\n          this.cleanStateItems();\r\n          // Delete interupt definition, because everything has finished and nothing can be interrupted.\r\n          delete this.interrupt;\r\n        }\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Must be called after transition ends to remove entries in curData and endData which are marked\r\n   * as deleted.\r\n   */\r\n  protected cleanStateItems(): void {\r\n    // clean current state array\r\n    for(let i=this.curData.length-1; i>=0; --i){\r\n      if(this.curData[i].data.deleted===true){\r\n        this.curData.splice(i, 1);\r\n      }\r\n    }\r\n    // clean end state array\r\n    for(let i=this.endData.length-1; i>=0; --i){\r\n      if(this.endData[i].data.deleted===true){\r\n        this.endData.splice(i,1);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks whether all items have assigned color values and if necessary completes colors in given data array.\r\n   */\r\n  protected initColors(): void {\r\n    // loop all entries\r\n    this.data.forEach( (item) => {\r\n      // if no color is assigned\r\n      if(!item.color){\r\n        // generate random color for item\r\n        item.color = this.generateRandomColor(item.value);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns maximal angle of current state items.\r\n   */\r\n  protected getMaxAngle(): number {\r\n    let maxAngle = 0;\r\n    this.curData.forEach( (curItem) => { \r\n      if(curItem.endAngle > maxAngle){\r\n        maxAngle = curItem.endAngle;\r\n      }\r\n    });\r\n    return maxAngle;\r\n  };\r\n\r\n  /**\r\n   * Calculates angles for current and end state items.\r\n   * @param maxAngle last maximal angle in current state to avoid \"jumping\" transitions\r\n   */\r\n  protected calculateAngles(maxAngle: number): void {\r\n    // calculate angles for current state items\r\n    {\r\n      // calculate sum of values\r\n      const total = this.curData.reduce((p, c) => p + c.value, 0);\r\n      // loop items and calculate start and end angles, initialize rendering\r\n      let lastAngle = 0;\r\n      this.curData.forEach( (item, idx) => {\r\n        // calculate angles by last used maximal angle. without data (total=0) simulate 0 values, so draw items in clockwise direction.\r\n        const nextAngle = lastAngle + ((maxAngle) / ((total===0)?1:total)) * item.value;\r\n        item.startAngle = lastAngle;\r\n        item.endAngle = nextAngle;\r\n        item.index = idx;\r\n        item.data.path = this.pathGenerator(item);\r\n        lastAngle = nextAngle;\r\n      });\r\n    }\r\n    // calculate angles for end state items\r\n    {\r\n      // calculate sum of values\r\n      const total = this.endData.reduce((p, c) => p + c.value, 0);\r\n      // loop items and calculate start and end angles, initialize rendering\r\n      let lastAngle = 0;\r\n      this.endData.forEach( (item, idx) => {\r\n        // calculate angles with circumference. without data (total=0) simulate 0 values, so draw items in anti-clockwise direction.\r\n        const nextAngle = lastAngle + ((2 * Math.PI) / ((total===0)?1:total)) * item.value;\r\n        item.startAngle = lastAngle;\r\n        item.endAngle = nextAngle;\r\n        item.index = idx;\r\n        item.data.path = this.pathGenerator(item);\r\n        lastAngle = nextAngle;\r\n      });\r\n    }\r\n  };\r\n\r\n  /** reference to tooltip div element */\r\n  private tooltip: HTMLDivElement;\r\n\r\n  /**\r\n   * fired when mouse enters a pie chart path element and shows tooltip\r\n   * @param event \r\n   */\r\n  public overPath(event: MouseEvent){\r\n    // get tooltip-text of path element\r\n    const txt = (event.target as SVGPathElement).getAttribute('tooltip');\r\n    // show tooltip and assign text\r\n    d3.select(this.tooltip)\r\n      .html(txt)\r\n      .style('display', 'block')\r\n      .transition()\r\n      .duration(250)\r\n      .style('opacity', 1);\r\n\r\n    // get index\r\n    const idx = parseInt((event.target as SVGPathElement).getAttribute('idx'),10);\r\n    // get caption of element\r\n    const caption = this.curData[idx].data.caption;\r\n    // get original data by caption\r\n    const item = this.data.filter( (d) => d.caption === caption)[0];\r\n    // if data found then emit chart click event\r\n    if(item){\r\n      this.chartHover.emit(item);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * fired when mouse moves over a pie chart path element and adjusts tooltip\r\n   * @param event \r\n   */\r\n  public movePath(event: MouseEvent){\r\n    // aggregate scroll positions, because event.page* properties are relative to top left corner of document\r\n    let offsetX = 0;\r\n    let offsetY = 0;\r\n    let element = (this.tooltip.parentElement as HTMLElement);\r\n    while(element){\r\n      offsetX += element.scrollLeft;\r\n      offsetY += element.scrollTop;\r\n      element = element.parentElement;\r\n    }\r\n    // adjust tooltip\r\n    d3.select(this.tooltip)\r\n      .style('top', (event.pageY - offsetY + 10)+'px')\r\n      .style('left', (event.pageX - offsetX + 10)+'px');\r\n  };\r\n\r\n  /**\r\n   * fired when mouse leaves a pie chart path element and hides tooltip\r\n   * @param event \r\n   */\r\n  public outPath(event: MouseEvent){\r\n    // hide tooltip\r\n    d3.select(this.tooltip)\r\n      .transition()\r\n      .duration(250)\r\n      .style('opacity',0)\r\n      .on('end', () => {\r\n        d3.select(this.tooltip).style('display', 'none')\r\n      });\r\n  };\r\n\r\n  /**\r\n   * fired when user clicks on a pie chart path element\r\n   * @param event \r\n   */\r\n  public clickPath(event: MouseEvent){\r\n    // get index\r\n    const idx = parseInt((event.target as SVGPathElement).getAttribute('idx'),10);\r\n    // get caption of element\r\n    const caption = this.curData[idx].data.caption;\r\n    // get original data by caption\r\n    const item = this.data.filter( (d) => d.caption === caption)[0];\r\n    // if data found then emit chart click event\r\n    if(item){\r\n      this.chartClick.emit(item);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * main rendering function\r\n   */\r\n  protected render(): void{\r\n    // interrupt possible running animations\r\n    if(this.interrupt) this.interrupt();\r\n    // initialize chart colors\r\n    this.initColors();\r\n    // calculate radius\r\n    this.radius = Math.min(this.width, this.height) / 2;\r\n    // calculate middle of chart\r\n    this.center = `translate(${this.width / 2}, ${this.height / 2})`;\r\n    // create path generator\r\n    this.pathGenerator = d3.arc().outerRadius(this.radius-this.outerSpacing).innerRadius(this.innerSpacing);\r\n    // get current maximal angle, necessary to avoid \"jumping\" transitions\r\n    const maxAngle = this.getMaxAngle();\r\n    // check data array for deleted entries and assign transition configuration\r\n    this.detectDeletedEntries();\r\n    // check data array for inserted entries and assign transition configuration\r\n    this.detectInsertedEntries();\r\n    // check data array for moved entries and assign transition configuration\r\n    this.detectMovedEntries();\r\n    // synchronize data entries with current and end state entries\r\n    this.syncItems();\r\n    // calculate angles for current and end state entries\r\n    this.calculateAngles(maxAngle);\r\n    // important! use setTimeout because angular first must exec change detection\r\n    setTimeout( () => {\r\n      // start change animations\r\n      this.animateChanges();\r\n    }, 0);\r\n  };\r\n\r\n  /*\r\n  private version1(): void {\r\n    const sum = this.data.reduce((p, c) => p + c.value, 0);\r\n    let lastAngle = 0;\r\n    this.data.forEach(d => {\r\n      const newAngle = lastAngle + ((2 * Math.PI) / sum) * d.value;\r\n      const context = path();\r\n      context.moveTo(0, 0);\r\n      context.arc(0, 0, this.radius, lastAngle, newAngle, false);\r\n      d.path = context.toString();\r\n      console.log(d.path);\r\n      lastAngle = newAngle;\r\n    });\r\n  }\r\n  */\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PieChartComponent } from './pie-chart.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\n@NgModule({\r\n  imports: [BrowserModule],\r\n  declarations: [PieChartComponent],\r\n  exports: [PieChartComponent]\r\n})\r\nexport class PieChartModule {}\r\n"],"names":["d3.select","d3.interpolate","d3.arc"],"mappings":"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"}
