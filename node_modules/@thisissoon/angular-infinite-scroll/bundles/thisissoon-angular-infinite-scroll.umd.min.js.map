{"version":3,"sources":["ng://@thisissoon/angular-infinite-scroll/app/infinite-scroll/shared/events.ts","ng://@thisissoon/angular-infinite-scroll/app/infinite-scroll/infinite-scroll.directive.ts","ng://@thisissoon/angular-infinite-scroll/app/infinite-scroll/infinite-scroll.module.ts"],"names":["eventPathScroll","eventScroll","InfiniteScrollDirective","this","scrollEnd","EventEmitter","offset","debounce","disabled","scroll$","Subject","ngUnsubscribe$","prototype","ngAfterViewInit","_this","pipe","takeUntil","debounceTime","map","scroll","y","height","filter","subscribe","emit","onScroll","scrollY","scrollheight","offsetHeight","next","ngOnDestroy","complete","Directive","args","selector","Output","Input","HostListener","events.eventScroll","events.eventPathScroll","InfiniteScrollModule","NgModule","declarations","exports"],"mappings":"ibAAA,IAAaA,EAAkB,CAC7B,0BACA,6BACA,8BAEWC,EAAc,SCwB3BC,EAAA,WAAA,SAAAA,IAQmBC,KAAAC,UAAY,IAAIC,EAAAA,aAKjBF,KAAAG,OAAS,EAITH,KAAAI,SAAW,IAIXJ,KAAAK,UAAW,EAIpBL,KAAAM,QAA2B,IAAIC,EAAAA,QAM9BP,KAAAQ,eAAiB,IAAID,EAAAA,QAwC/B,OAnCSR,EAAAU,UAAAC,gBAAP,WAAA,IAAAC,EAAAX,KACEA,KAAKM,QACFM,KACCC,EAAAA,UAAUb,KAAKQ,gBACfM,EAAAA,aAAad,KAAKI,UAClBW,EAAAA,IAAI,SAAAC,GAEF,MAAO,CAAEC,EADCD,EAAOC,EAAIN,EAAKR,OACde,OAAQF,EAAOE,UAE7BC,EAAAA,OAAO,WAAM,OAACR,EAAKN,WACnBc,EAAAA,OAAO,SAAAH,GAAU,OAAAA,EAAOC,GAAKD,EAAOE,UAErCE,UAAU,WAAM,OAAAT,EAAKV,UAAUoB,UAM7BtB,EAAAU,UAAAa,SADP,SAEEC,EACAC,EACAC,OAEMP,EAASM,EACTP,EAAIM,EAAUE,EACpBzB,KAAKM,QAAQoB,KAAK,CAAET,EAACA,EAAEC,OAAMA,KAMxBnB,EAAAU,UAAAkB,YAAP,WACE3B,KAAKQ,eAAekB,OACpB1B,KAAKQ,eAAeoB,gCArEvBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,4DAOTC,EAAAA,uBAKAC,EAAAA,wBAIAA,EAAAA,wBAIAA,EAAAA,wBAgCAC,EAAAA,aAAYJ,KAAA,CAACK,EAAoBC,MAkBpCrC,EAvEA,GCrBAsC,EAAA,WAAA,SAAAA,KAImC,2BAJlCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACxC,GACfyC,QAAS,CAACzC,OAEuBsC,EAJnC","sourcesContent":["export const eventPathScroll = [\n  '$event.target.scrollTop',\n  '$event.target.scrollHeight',\n  '$event.target.offsetHeight',\n];\nexport const eventScroll = 'scroll';\n","import {\n  Directive,\n  AfterViewInit,\n  OnDestroy,\n  HostListener,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil, filter, map } from 'rxjs/operators';\n\nimport { Scroll } from './shared/scroll.model';\nimport * as events from './shared/events';\n\n/**\n * @example\n * ```html\n * <div\n *   class=\"foo\"\n *   snInfiniteScroll\n *   (scrollEnd)=\"onScrollEnd()\"\n *   [offset]=\"100\"\n *   [debounce]=\"123\"\n *   [disabled]=\"disabled\">\n * </div>\n * ```\n *\n */\n@Directive({\n  selector: '[snInfiniteScroll]',\n})\nexport class InfiniteScrollDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Event that will be triggered when user has scrolled to\n   * bottom of the element\n   */\n  @Output() public scrollEnd = new EventEmitter<void>();\n  /**\n   * An offset from the bottom of the element to trigger\n   * `scrollEnd` event\n   */\n  @Input() public offset = 0;\n  /**\n   * Specify debounce duration in ms\n   */\n  @Input() public debounce = 100;\n  /**\n   * If true then `scrollEnd` event should NOT be emitted\n   */\n  @Input() public disabled = false;\n  /**\n   * Emits a new value on element scroll event\n   */\n  public scroll$: Subject<Scroll> = new Subject<Scroll>();\n  /**\n   * Completes on component destroy lifecycle event\n   * used to unsubscribe from infinite observables\n   *\n   */\n  private ngUnsubscribe$ = new Subject<void>();\n  /**\n   * Subscribe to `scroll$` observable and emit `scrollEnd` event\n   * when element scroll position is at the end of the element\n   */\n  public ngAfterViewInit(): void {\n    this.scroll$\n      .pipe(\n        takeUntil(this.ngUnsubscribe$),\n        debounceTime(this.debounce),\n        map(scroll => {\n          const y = scroll.y + this.offset;\n          return { y, height: scroll.height };\n        }),\n        filter(() => !this.disabled),\n        filter(scroll => scroll.y >= scroll.height),\n      )\n      .subscribe(() => this.scrollEnd.emit());\n  }\n  /**\n   * On element scroll event emit next `scroll$` observable value\n   */\n  @HostListener(events.eventScroll, events.eventPathScroll)\n  public onScroll(\n    scrollY: number,\n    scrollheight: number,\n    offsetHeight: number,\n  ): void {\n    const height = scrollheight;\n    const y = scrollY + offsetHeight;\n    this.scroll$.next({ y, height });\n  }\n  /**\n   * trigger `ngUnsubscribe` complete on\n   * component destroy lifecycle hook\n   */\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\n\n/**\n * A simple infinite scrolling module for Angular which\n * emits an event when an element has been scrolled to the bottom.\n */\n@NgModule({\n  declarations: [InfiniteScrollDirective],\n  exports: [InfiniteScrollDirective],\n})\nexport class InfiniteScrollModule {}\n"]}