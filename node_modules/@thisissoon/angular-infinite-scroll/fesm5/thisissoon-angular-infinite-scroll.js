import { Directive, HostListener, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, takeUntil, filter, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var eventPathScroll = [
    '$event.target.scrollTop',
    '$event.target.scrollHeight',
    '$event.target.offsetHeight',
];
/** @type {?} */
var eventScroll = 'scroll';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@example
 * ```html
 * <div
 *   class="foo"
 *   snInfiniteScroll
 *   (scrollEnd)="onScrollEnd()"
 *   [offset]="100"
 *   [debounce]="123"
 *   [disabled]="disabled">
 * </div>
 * ```
 *
 */
var InfiniteScrollDirective = /** @class */ (function () {
    function InfiniteScrollDirective() {
        /**
         * Event that will be triggered when user has scrolled to
         * bottom of the element
         */
        this.scrollEnd = new EventEmitter();
        /**
         * An offset from the bottom of the element to trigger
         * `scrollEnd` event
         */
        this.offset = 0;
        /**
         * Specify debounce duration in ms
         */
        this.debounce = 100;
        /**
         * If true then `scrollEnd` event should NOT be emitted
         */
        this.disabled = false;
        /**
         * Emits a new value on element scroll event
         */
        this.scroll$ = new Subject();
        /**
         * Completes on component destroy lifecycle event
         * used to unsubscribe from infinite observables
         *
         */
        this.ngUnsubscribe$ = new Subject();
    }
    /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     */
    /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     * @return {?}
     */
    InfiniteScrollDirective.prototype.ngAfterViewInit = /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     * @return {?}
     */
    function () {
        var _this = this;
        this.scroll$
            .pipe(takeUntil(this.ngUnsubscribe$), debounceTime(this.debounce), map(function (scroll) {
            /** @type {?} */
            var y = scroll.y + _this.offset;
            return { y: y, height: scroll.height };
        }), filter(function () { return !_this.disabled; }), filter(function (scroll) { return scroll.y >= scroll.height; }))
            .subscribe(function () { return _this.scrollEnd.emit(); });
    };
    /**
     * On element scroll event emit next `scroll$` observable value
     */
    /**
     * On element scroll event emit next `scroll$` observable value
     * @param {?} scrollY
     * @param {?} scrollheight
     * @param {?} offsetHeight
     * @return {?}
     */
    InfiniteScrollDirective.prototype.onScroll = /**
     * On element scroll event emit next `scroll$` observable value
     * @param {?} scrollY
     * @param {?} scrollheight
     * @param {?} offsetHeight
     * @return {?}
     */
    function (scrollY, scrollheight, offsetHeight) {
        /** @type {?} */
        var height = scrollheight;
        /** @type {?} */
        var y = scrollY + offsetHeight;
        this.scroll$.next({ y: y, height: height });
    };
    /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     */
    /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     * @return {?}
     */
    InfiniteScrollDirective.prototype.ngOnDestroy = /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     * @return {?}
     */
    function () {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    };
    InfiniteScrollDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[snInfiniteScroll]',
                },] }
    ];
    InfiniteScrollDirective.propDecorators = {
        scrollEnd: [{ type: Output }],
        offset: [{ type: Input }],
        debounce: [{ type: Input }],
        disabled: [{ type: Input }],
        onScroll: [{ type: HostListener, args: [eventScroll, eventPathScroll,] }]
    };
    return InfiniteScrollDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A simple infinite scrolling module for Angular which
 * emits an event when an element has been scrolled to the bottom.
 */
var InfiniteScrollModule = /** @class */ (function () {
    function InfiniteScrollModule() {
    }
    InfiniteScrollModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InfiniteScrollDirective],
                    exports: [InfiniteScrollDirective],
                },] }
    ];
    return InfiniteScrollModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { InfiniteScrollModule, InfiniteScrollDirective, eventPathScroll, eventScroll };

//# sourceMappingURL=thisissoon-angular-infinite-scroll.js.map