import { AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { Scroll } from './shared/scroll.model';
/**
 * @example
 * ```html
 * <div
 *   class="foo"
 *   snInfiniteScroll
 *   (scrollEnd)="onScrollEnd()"
 *   [offset]="100"
 *   [debounce]="123"
 *   [disabled]="disabled">
 * </div>
 * ```
 *
 */
export declare class InfiniteScrollDirective implements AfterViewInit, OnDestroy {
    /**
     * Event that will be triggered when user has scrolled to
     * bottom of the element
     */
    scrollEnd: EventEmitter<void>;
    /**
     * An offset from the bottom of the element to trigger
     * `scrollEnd` event
     */
    offset: number;
    /**
     * Specify debounce duration in ms
     */
    debounce: number;
    /**
     * If true then `scrollEnd` event should NOT be emitted
     */
    disabled: boolean;
    /**
     * Emits a new value on element scroll event
     */
    scroll$: Subject<Scroll>;
    /**
     * Completes on component destroy lifecycle event
     * used to unsubscribe from infinite observables
     *
     */
    private ngUnsubscribe$;
    /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     */
    ngAfterViewInit(): void;
    /**
     * On element scroll event emit next `scroll$` observable value
     */
    onScroll(scrollY: number, scrollheight: number, offsetHeight: number): void;
    /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     */
    ngOnDestroy(): void;
}
